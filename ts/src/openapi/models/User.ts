/**
 * Kanmon Public V2 API
 * Kanmon\'s public api. Contains all of the endpoints for both capital providers and platforms
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { UserAddress } from '../models/UserAddress';
import { HttpFile } from '../http/http';

export class User {
    /**
    * The UUID representing the user in Kanmon.
    */
    'id': string;
    /**
    * Your platform’s unique ID for the user.
    */
    'platformUserId'?: string;
    /**
    * Your platform’s unique business ID for the user.
    */
    'platformBusinessId': string | null;
    /**
    * The UUID representing the user’s business in Kanmon.
    */
    'businessId': string;
    'address': UserAddress | null;
    /**
    * The user’s email.
    */
    'email': any | null;
    /**
    * The user’s first name.
    */
    'firstName': any | null;
    /**
    * The user’s last name.
    */
    'lastName': any | null;
    /**
    * The user’s roles. If no roles are defined, the user will be prompted to select a role within Kanmon. <br/><br/>A primary owner is a user with the authority to issue debt on behalf of the business. <br/>This means the user can complete onboarding, receive offers, choose to accept offers, <br/>sign financing agreements, and service an active issued product. <br/><br/>An operator is a user with permission to service an active issued product. Examples are uploading invoices on <br/>behalf of the business, checking the status of payments, etc. <br /><br/>Please note Kanmon supports an additional user role called secondary owners. <br/>Secondary owners are beneficial owners of a business, like primary owners, and Kanmon <br/>must perform KYC checks for these users. Kanmon will handle creating and managing <br/>these users for KYC purposes through a separate process. <br/>
    */
    'roles'?: Array<UserRolesEnum>;
    /**
    * Metadata from your system that you want to associate the user with.
    */
    'metadata': any;
    /**
    * Creation UTC ISO 8601 timestamp of the user.
    */
    'createdAt': string;
    /**
    * Last updated UTC ISO 8601 timestamp of the user.
    */
    'updatedAt': string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "platformUserId",
            "baseName": "platformUserId",
            "type": "string",
            "format": ""
        },
        {
            "name": "platformBusinessId",
            "baseName": "platformBusinessId",
            "type": "string",
            "format": ""
        },
        {
            "name": "businessId",
            "baseName": "businessId",
            "type": "string",
            "format": ""
        },
        {
            "name": "address",
            "baseName": "address",
            "type": "UserAddress",
            "format": ""
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "any",
            "format": ""
        },
        {
            "name": "firstName",
            "baseName": "firstName",
            "type": "any",
            "format": ""
        },
        {
            "name": "lastName",
            "baseName": "lastName",
            "type": "any",
            "format": ""
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "Array<UserRolesEnum>",
            "format": ""
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "any",
            "format": ""
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "string",
            "format": ""
        },
        {
            "name": "updatedAt",
            "baseName": "updatedAt",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return User.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum UserRolesEnum {
    PrimaryOwner = 'PRIMARY_OWNER',
    Operator = 'OPERATOR'
}

