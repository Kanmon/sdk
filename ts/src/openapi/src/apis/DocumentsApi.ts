/* tslint:disable */
/* eslint-disable */
/**
 * Kanmon Public V2 API
 * Kanmon\'s public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestException,
  CreateBusinessDocumentsResponse,
  ForbiddenException,
  InternalServerErrorException,
} from '../models/index';
import {
    BadRequestExceptionFromJSON,
    BadRequestExceptionToJSON,
    CreateBusinessDocumentsResponseFromJSON,
    CreateBusinessDocumentsResponseToJSON,
    ForbiddenExceptionFromJSON,
    ForbiddenExceptionToJSON,
    InternalServerErrorExceptionFromJSON,
    InternalServerErrorExceptionToJSON,
} from '../models/index';

export interface CreateBusinessDocumentRequest {
    invoices: Array<Blob>;
    businessId?: string;
    platformBusinessId?: string;
}

/**
 * 
 */
export class DocumentsApi extends runtime.BaseAPI {

    /**
     * Upload documents for a business
     */
    async createBusinessDocumentRaw(requestParameters: CreateBusinessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateBusinessDocumentsResponse>> {
        if (requestParameters['invoices'] == null) {
            throw new runtime.RequiredError(
                'invoices',
                'Required parameter "invoices" was null or undefined when calling createBusinessDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['invoices'] != null) {
            requestParameters['invoices'].forEach((element) => {
                formParams.append('invoices', element as any);
            })
        }

        if (requestParameters['businessId'] != null) {
            formParams.append('businessId', requestParameters['businessId'] as any);
        }

        if (requestParameters['platformBusinessId'] != null) {
            formParams.append('platformBusinessId', requestParameters['platformBusinessId'] as any);
        }

        const response = await this.request({
            path: `/api/platform/v2/documents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateBusinessDocumentsResponseFromJSON(jsonValue));
    }

    /**
     * Upload documents for a business
     */
    async createBusinessDocument(requestParameters: CreateBusinessDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateBusinessDocumentsResponse> {
        const response = await this.createBusinessDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
