/* tslint:disable */
/* eslint-disable */
/**
 * Kanmon Public V2 API
 * Kanmon\'s public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestException,
  ForbiddenException,
  GetIssuedProductsResponse,
  InternalServerErrorException,
  IssuedProduct,
  IssuedProductNotFoundException,
} from '../models/index';
import {
    BadRequestExceptionFromJSON,
    BadRequestExceptionToJSON,
    ForbiddenExceptionFromJSON,
    ForbiddenExceptionToJSON,
    GetIssuedProductsResponseFromJSON,
    GetIssuedProductsResponseToJSON,
    InternalServerErrorExceptionFromJSON,
    InternalServerErrorExceptionToJSON,
    IssuedProductFromJSON,
    IssuedProductToJSON,
    IssuedProductNotFoundExceptionFromJSON,
    IssuedProductNotFoundExceptionToJSON,
} from '../models/index';

export interface GetAllIssuedProductsRequest {
    offerIds?: string;
    ids?: string;
    platformBusinessIds?: string;
    businessIds?: string;
    offset?: number;
    limit?: number;
    createdAtStart?: string;
    createdAtEnd?: string;
}

export interface GetIssuedProductByIdRequest {
    id: string;
}

/**
 * 
 */
export class IssuedProductsApi extends runtime.BaseAPI {

    /**
     * Fetch issued products
     */
    async getAllIssuedProductsRaw(requestParameters: GetAllIssuedProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetIssuedProductsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['offerIds'] != null) {
            queryParameters['offerIds'] = requestParameters['offerIds'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['platformBusinessIds'] != null) {
            queryParameters['platformBusinessIds'] = requestParameters['platformBusinessIds'];
        }

        if (requestParameters['businessIds'] != null) {
            queryParameters['businessIds'] = requestParameters['businessIds'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['createdAtStart'] != null) {
            queryParameters['createdAtStart'] = requestParameters['createdAtStart'];
        }

        if (requestParameters['createdAtEnd'] != null) {
            queryParameters['createdAtEnd'] = requestParameters['createdAtEnd'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/api/platform/v2/issued-products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIssuedProductsResponseFromJSON(jsonValue));
    }

    /**
     * Fetch issued products
     */
    async getAllIssuedProducts(requestParameters: GetAllIssuedProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetIssuedProductsResponse> {
        const response = await this.getAllIssuedProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch an issued product
     */
    async getIssuedProductByIdRaw(requestParameters: GetIssuedProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuedProduct>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getIssuedProductById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/api/platform/v2/issued-products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuedProductFromJSON(jsonValue));
    }

    /**
     * Fetch an issued product
     */
    async getIssuedProductById(requestParameters: GetIssuedProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuedProduct> {
        const response = await this.getIssuedProductByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
