/* tslint:disable */
/* eslint-disable */
/**
 * Kanmon Public V2 API
 * Kanmon\'s public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestException,
  BusinessNotFoundException,
  CreateEmbeddedSession409Response,
  CreateSessionTokenRequestBody,
  EmbeddedSession,
  ForbiddenException,
  InternalServerErrorException,
} from '../models/index';
import {
    BadRequestExceptionFromJSON,
    BadRequestExceptionToJSON,
    BusinessNotFoundExceptionFromJSON,
    BusinessNotFoundExceptionToJSON,
    CreateEmbeddedSession409ResponseFromJSON,
    CreateEmbeddedSession409ResponseToJSON,
    CreateSessionTokenRequestBodyFromJSON,
    CreateSessionTokenRequestBodyToJSON,
    EmbeddedSessionFromJSON,
    EmbeddedSessionToJSON,
    ForbiddenExceptionFromJSON,
    ForbiddenExceptionToJSON,
    InternalServerErrorExceptionFromJSON,
    InternalServerErrorExceptionToJSON,
} from '../models/index';

export interface CreateEmbeddedSessionRequest {
    createSessionTokenRequestBody: CreateSessionTokenRequestBody;
}

/**
 * 
 */
export class EmbeddedSessionsApi extends runtime.BaseAPI {

    /**
     * Create an embedded session
     */
    async createEmbeddedSessionRaw(requestParameters: CreateEmbeddedSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddedSession>> {
        if (requestParameters['createSessionTokenRequestBody'] == null) {
            throw new runtime.RequiredError(
                'createSessionTokenRequestBody',
                'Required parameter "createSessionTokenRequestBody" was null or undefined when calling createEmbeddedSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/api/platform/v2/embedded-session`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSessionTokenRequestBodyToJSON(requestParameters['createSessionTokenRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddedSessionFromJSON(jsonValue));
    }

    /**
     * Create an embedded session
     */
    async createEmbeddedSession(requestParameters: CreateEmbeddedSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddedSession> {
        const response = await this.createEmbeddedSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
