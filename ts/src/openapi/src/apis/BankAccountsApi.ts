/* tslint:disable */
/* eslint-disable */
/**
 * Kanmon Public V2 API
 * Kanmon\'s public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestException,
  BankAccountAlreadyExistException,
  BankAccountNotFoundException,
  BusinessBankAccount,
  BusinessNotFoundException,
  CreateBusinessBankAccountRequestBody,
  ForbiddenException,
  GetBusinessBankAccountsResponse,
  InternalServerErrorException,
  UpdateBusinessAccountRequestBody,
} from '../models/index';
import {
    BadRequestExceptionFromJSON,
    BadRequestExceptionToJSON,
    BankAccountAlreadyExistExceptionFromJSON,
    BankAccountAlreadyExistExceptionToJSON,
    BankAccountNotFoundExceptionFromJSON,
    BankAccountNotFoundExceptionToJSON,
    BusinessBankAccountFromJSON,
    BusinessBankAccountToJSON,
    BusinessNotFoundExceptionFromJSON,
    BusinessNotFoundExceptionToJSON,
    CreateBusinessBankAccountRequestBodyFromJSON,
    CreateBusinessBankAccountRequestBodyToJSON,
    ForbiddenExceptionFromJSON,
    ForbiddenExceptionToJSON,
    GetBusinessBankAccountsResponseFromJSON,
    GetBusinessBankAccountsResponseToJSON,
    InternalServerErrorExceptionFromJSON,
    InternalServerErrorExceptionToJSON,
    UpdateBusinessAccountRequestBodyFromJSON,
    UpdateBusinessAccountRequestBodyToJSON,
} from '../models/index';

export interface CreateBusinessBankAccountRequest {
    createBusinessBankAccountRequestBody: CreateBusinessBankAccountRequestBody;
}

export interface GetBusinessBankAccountRequest {
    id: string;
    idType?: GetBusinessBankAccountIdTypeEnum;
}

export interface GetBusinessBankAccountsRequest {
    ids?: string;
    platformBankAccountIds?: string;
    platformBusinessIds?: string;
    businessIds?: string;
    offset?: number;
    limit?: number;
    createdAtStart?: string;
    createdAtEnd?: string;
}

export interface UpdateBusinessBankAccountRequest {
    id: string;
    updateBusinessAccountRequestBody: UpdateBusinessAccountRequestBody;
    idType?: UpdateBusinessBankAccountIdTypeEnum;
}

/**
 * 
 */
export class BankAccountsApi extends runtime.BaseAPI {

    /**
     * We only support creating disbursement checking accounts at the moment. Each business can only have one disbursement checking account.       Please contact Kanmon to enable access to bank account APIs.
     * Create a business bank account
     */
    async createBusinessBankAccountRaw(requestParameters: CreateBusinessBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessBankAccount>> {
        if (requestParameters['createBusinessBankAccountRequestBody'] == null) {
            throw new runtime.RequiredError(
                'createBusinessBankAccountRequestBody',
                'Required parameter "createBusinessBankAccountRequestBody" was null or undefined when calling createBusinessBankAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/api/platform/v2/bank-accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBusinessBankAccountRequestBodyToJSON(requestParameters['createBusinessBankAccountRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessBankAccountFromJSON(jsonValue));
    }

    /**
     * We only support creating disbursement checking accounts at the moment. Each business can only have one disbursement checking account.       Please contact Kanmon to enable access to bank account APIs.
     * Create a business bank account
     */
    async createBusinessBankAccount(requestParameters: CreateBusinessBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessBankAccount> {
        const response = await this.createBusinessBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Please contact Kanmon to enable access to bank account APIs.
     * Fetch a business bank account
     */
    async getBusinessBankAccountRaw(requestParameters: GetBusinessBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessBankAccount>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBusinessBankAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['idType'] != null) {
            queryParameters['idType'] = requestParameters['idType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/api/platform/v2/bank-accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessBankAccountFromJSON(jsonValue));
    }

    /**
     * Please contact Kanmon to enable access to bank account APIs.
     * Fetch a business bank account
     */
    async getBusinessBankAccount(requestParameters: GetBusinessBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessBankAccount> {
        const response = await this.getBusinessBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Please contact Kanmon to enable access to bank account APIs.
     * Fetch business bank accounts
     */
    async getBusinessBankAccountsRaw(requestParameters: GetBusinessBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBusinessBankAccountsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['platformBankAccountIds'] != null) {
            queryParameters['platformBankAccountIds'] = requestParameters['platformBankAccountIds'];
        }

        if (requestParameters['platformBusinessIds'] != null) {
            queryParameters['platformBusinessIds'] = requestParameters['platformBusinessIds'];
        }

        if (requestParameters['businessIds'] != null) {
            queryParameters['businessIds'] = requestParameters['businessIds'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['createdAtStart'] != null) {
            queryParameters['createdAtStart'] = requestParameters['createdAtStart'];
        }

        if (requestParameters['createdAtEnd'] != null) {
            queryParameters['createdAtEnd'] = requestParameters['createdAtEnd'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/api/platform/v2/bank-accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBusinessBankAccountsResponseFromJSON(jsonValue));
    }

    /**
     * Please contact Kanmon to enable access to bank account APIs.
     * Fetch business bank accounts
     */
    async getBusinessBankAccounts(requestParameters: GetBusinessBankAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBusinessBankAccountsResponse> {
        const response = await this.getBusinessBankAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * We only support creating disbursement checking accounts at the moment. Each business can only have one disbursement checking account.         Please contact Kanmon to enable access to bank account APIs.
     * Update a business bank account
     */
    async updateBusinessBankAccountRaw(requestParameters: UpdateBusinessBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessBankAccount>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateBusinessBankAccount().'
            );
        }

        if (requestParameters['updateBusinessAccountRequestBody'] == null) {
            throw new runtime.RequiredError(
                'updateBusinessAccountRequestBody',
                'Required parameter "updateBusinessAccountRequestBody" was null or undefined when calling updateBusinessBankAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['idType'] != null) {
            queryParameters['idType'] = requestParameters['idType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/api/platform/v2/bank-accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBusinessAccountRequestBodyToJSON(requestParameters['updateBusinessAccountRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessBankAccountFromJSON(jsonValue));
    }

    /**
     * We only support creating disbursement checking accounts at the moment. Each business can only have one disbursement checking account.         Please contact Kanmon to enable access to bank account APIs.
     * Update a business bank account
     */
    async updateBusinessBankAccount(requestParameters: UpdateBusinessBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessBankAccount> {
        const response = await this.updateBusinessBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetBusinessBankAccountIdTypeEnum = {
    KANMON: 'KANMON',
    PLATFORM: 'PLATFORM'
} as const;
export type GetBusinessBankAccountIdTypeEnum = typeof GetBusinessBankAccountIdTypeEnum[keyof typeof GetBusinessBankAccountIdTypeEnum];
/**
 * @export
 */
export const UpdateBusinessBankAccountIdTypeEnum = {
    KANMON: 'KANMON',
    PLATFORM: 'PLATFORM'
} as const;
export type UpdateBusinessBankAccountIdTypeEnum = typeof UpdateBusinessBankAccountIdTypeEnum[keyof typeof UpdateBusinessBankAccountIdTypeEnum];
