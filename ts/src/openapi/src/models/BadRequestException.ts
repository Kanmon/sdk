/* tslint:disable */
/* eslint-disable */
/**
 * Kanmon Public V2 API
 * Kanmon\'s public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BadRequestException
 */
export interface BadRequestException {
    /**
     * Safe for programmatic use.
     * @type {string}
     * @memberof BadRequestException
     */
    errorCode: BadRequestExceptionErrorCodeEnum;
    /**
     * The human readable description of the error.
     * @type {string}
     * @memberof BadRequestException
     */
    message: string;
    /**
     * When the error occurred - ISO 8601 format.
     * @type {string}
     * @memberof BadRequestException
     */
    timestamp: string;
}


/**
 * @export
 */
export const BadRequestExceptionErrorCodeEnum = {
    BadRequestException: 'BadRequestException'
} as const;
export type BadRequestExceptionErrorCodeEnum = typeof BadRequestExceptionErrorCodeEnum[keyof typeof BadRequestExceptionErrorCodeEnum];


/**
 * Check if a given object implements the BadRequestException interface.
 */
export function instanceOfBadRequestException(value: object): value is BadRequestException {
    if (!('errorCode' in value) || value['errorCode'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function BadRequestExceptionFromJSON(json: any): BadRequestException {
    return BadRequestExceptionFromJSONTyped(json, false);
}

export function BadRequestExceptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): BadRequestException {
    if (json == null) {
        return json;
    }
    return {
        
        'errorCode': json['errorCode'],
        'message': json['message'],
        'timestamp': json['timestamp'],
    };
}

export function BadRequestExceptionToJSON(value?: BadRequestException | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'errorCode': value['errorCode'],
        'message': value['message'],
        'timestamp': value['timestamp'],
    };
}

