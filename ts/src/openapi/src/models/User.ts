/* tslint:disable */
/* eslint-disable */
/**
 * Kanmon Public V2 API
 * Kanmon\'s public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserAddress } from './UserAddress';
import {
    UserAddressFromJSON,
    UserAddressFromJSONTyped,
    UserAddressToJSON,
} from './UserAddress';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * The UUID representing the user in Kanmon.
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * Your platform’s unique ID for the user.
     * @type {string}
     * @memberof User
     */
    platformUserId?: string;
    /**
     * Your platform’s unique business ID for the user.
     * @type {string}
     * @memberof User
     */
    platformBusinessId: string | null;
    /**
     * The UUID representing the user’s business in Kanmon.
     * @type {string}
     * @memberof User
     */
    businessId: string;
    /**
     * 
     * @type {UserAddress}
     * @memberof User
     */
    address: UserAddress | null;
    /**
     * The user’s email.
     * @type {string}
     * @memberof User
     */
    email: string | null;
    /**
     * The user’s first name.
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * The user’s last name.
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * The user’s roles. If no roles are defined, the user will be prompted to select a role within Kanmon. <br/><br/>A primary owner is a user with the authority to issue debt on behalf of the business. <br/>This means the user can complete onboarding, receive offers, choose to accept offers, <br/>sign financing agreements, and service an active issued product. <br/><br/>An operator is a user with permission to service an active issued product. Examples are uploading invoices on <br/>behalf of the business, checking the status of payments, etc. <br /><br/>Please note Kanmon supports an additional user role called secondary owners. <br/>Secondary owners are beneficial owners of a business, like primary owners, and Kanmon <br/>must perform KYC checks for these users. Kanmon will handle creating and managing <br/>these users for KYC purposes through a separate process. <br/>
     * @type {Array<string>}
     * @memberof User
     */
    roles?: Array<UserRolesEnum>;
    /**
     * Metadata from your system that you want to associate the user with.
     * @type {object}
     * @memberof User
     */
    metadata: object;
    /**
     * Creation UTC ISO 8601 timestamp of the user.
     * @type {string}
     * @memberof User
     */
    createdAt: string;
    /**
     * Last updated UTC ISO 8601 timestamp of the user.
     * @type {string}
     * @memberof User
     */
    updatedAt: string;
}


/**
 * @export
 */
export const UserRolesEnum = {
    PrimaryOwner: 'PRIMARY_OWNER',
    Operator: 'OPERATOR'
} as const;
export type UserRolesEnum = typeof UserRolesEnum[keyof typeof UserRolesEnum];


/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('platformBusinessId' in value)) return false;
    if (!('businessId' in value)) return false;
    if (!('address' in value)) return false;
    if (!('email' in value)) return false;
    if (!('metadata' in value)) return false;
    if (!('createdAt' in value)) return false;
    if (!('updatedAt' in value)) return false;
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'platformUserId': json['platformUserId'] == null ? undefined : json['platformUserId'],
        'platformBusinessId': json['platformBusinessId'],
        'businessId': json['businessId'],
        'address': UserAddressFromJSON(json['address']),
        'email': json['email'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'roles': json['roles'] == null ? undefined : json['roles'],
        'metadata': json['metadata'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'platformUserId': value['platformUserId'],
        'platformBusinessId': value['platformBusinessId'],
        'businessId': value['businessId'],
        'address': UserAddressToJSON(value['address']),
        'email': value['email'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'roles': value['roles'],
        'metadata': value['metadata'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
    };
}

