/* tslint:disable */
/* eslint-disable */
/**
 * Kanmon Public V2 API
 * Kanmon\'s public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PaymentOrderStatus } from './PaymentOrderStatus';
import {
    PaymentOrderStatusFromJSON,
    PaymentOrderStatusFromJSONTyped,
    PaymentOrderStatusToJSON,
} from './PaymentOrderStatus';

/**
 * 
 * @export
 * @interface PaymentOrder
 */
export interface PaymentOrder {
    /**
     * The UUID representing the payment order in Kanmon.
     * @type {string}
     * @memberof PaymentOrder
     */
    id: string;
    /**
     * The UUID representing the issued product in Kanmon.
     * @type {string}
     * @memberof PaymentOrder
     */
    issuedProductId: string;
    /**
     * The UUID representing the draw request in Kanmon. (only present for Line of Credit).
     * @type {string}
     * @memberof PaymentOrder
     */
    drawRequestId: string | null;
    /**
     * The UUID representing the invoice in Kanmon. (only present for Invoice Financing).
     * @type {string}
     * @memberof PaymentOrder
     */
    invoiceId: string | null;
    /**
     * Your platformâ€™s unique ID for the invoice. (only present for Invoice Financing).
     * @type {string}
     * @memberof PaymentOrder
     */
    platformInvoiceId: string | null;
    /**
     * The effective UTC ISO 8601 date that the payment will process.
     * @type {string}
     * @memberof PaymentOrder
     */
    effectiveDate: string;
    /**
     * The UTC ISO 8601 date that the payment was settled.
     * @type {string}
     * @memberof PaymentOrder
     */
    settledDate: string | null;
    /**
     * The total payment amount - in cents.
     * @type {number}
     * @memberof PaymentOrder
     */
    totalPaymentAmountCents: number;
    /**
     * The principal payment amount - in cents. (null for disbursements).
     * @type {number}
     * @memberof PaymentOrder
     */
    principalPaymentAmountCents: number | null;
    /**
     * The interest payment amount - in cents. (null for disbursements).
     * @type {number}
     * @memberof PaymentOrder
     */
    interestPaymentAmountCents: number | null;
    /**
     * The fee payment amount - in cents. (null for disbursements).
     * @type {number}
     * @memberof PaymentOrder
     */
    feePaymentAmountCents: number | null;
    /**
     * The type of the fee that was charged. (only present when `feePaymentAmountCents` is not 0 or null).
     * @type {string}
     * @memberof PaymentOrder
     */
    feeType?: PaymentOrderFeeTypeEnum | null;
    /**
     * The direction of the payment.
     * @type {string}
     * @memberof PaymentOrder
     */
    direction: PaymentOrderDirectionEnum;
    /**
     * 
     * @type {PaymentOrderStatus}
     * @memberof PaymentOrder
     */
    status: PaymentOrderStatus;
    /**
     * Creation UTC ISO 8601 timestamp of the payment order.
     * @type {string}
     * @memberof PaymentOrder
     */
    createdAt: string;
    /**
     * Last updated UTC ISO 8601 timestamp of the payment order.
     * @type {string}
     * @memberof PaymentOrder
     */
    updatedAt: string;
}


/**
 * @export
 */
export const PaymentOrderFeeTypeEnum = {
    LATE_PAYMENT: 'LATE_PAYMENT',
    INSUFFICIENT_FUNDS: 'INSUFFICIENT_FUNDS',
    TRANSACTION_FEE: 'TRANSACTION_FEE',
    MAINTENANCE: 'MAINTENANCE'
} as const;
export type PaymentOrderFeeTypeEnum = typeof PaymentOrderFeeTypeEnum[keyof typeof PaymentOrderFeeTypeEnum];

/**
 * @export
 */
export const PaymentOrderDirectionEnum = {
    DISBURSEMENT: 'DISBURSEMENT',
    REPAYMENT: 'REPAYMENT'
} as const;
export type PaymentOrderDirectionEnum = typeof PaymentOrderDirectionEnum[keyof typeof PaymentOrderDirectionEnum];


/**
 * Check if a given object implements the PaymentOrder interface.
 */
export function instanceOfPaymentOrder(value: object): value is PaymentOrder {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('issuedProductId' in value) || value['issuedProductId'] === undefined) return false;
    if (!('drawRequestId' in value) || value['drawRequestId'] === undefined) return false;
    if (!('invoiceId' in value) || value['invoiceId'] === undefined) return false;
    if (!('platformInvoiceId' in value) || value['platformInvoiceId'] === undefined) return false;
    if (!('effectiveDate' in value) || value['effectiveDate'] === undefined) return false;
    if (!('settledDate' in value) || value['settledDate'] === undefined) return false;
    if (!('totalPaymentAmountCents' in value) || value['totalPaymentAmountCents'] === undefined) return false;
    if (!('principalPaymentAmountCents' in value) || value['principalPaymentAmountCents'] === undefined) return false;
    if (!('interestPaymentAmountCents' in value) || value['interestPaymentAmountCents'] === undefined) return false;
    if (!('feePaymentAmountCents' in value) || value['feePaymentAmountCents'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function PaymentOrderFromJSON(json: any): PaymentOrder {
    return PaymentOrderFromJSONTyped(json, false);
}

export function PaymentOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentOrder {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'issuedProductId': json['issuedProductId'],
        'drawRequestId': json['drawRequestId'],
        'invoiceId': json['invoiceId'],
        'platformInvoiceId': json['platformInvoiceId'],
        'effectiveDate': json['effectiveDate'],
        'settledDate': json['settledDate'],
        'totalPaymentAmountCents': json['totalPaymentAmountCents'],
        'principalPaymentAmountCents': json['principalPaymentAmountCents'],
        'interestPaymentAmountCents': json['interestPaymentAmountCents'],
        'feePaymentAmountCents': json['feePaymentAmountCents'],
        'feeType': json['feeType'] == null ? undefined : json['feeType'],
        'direction': json['direction'],
        'status': PaymentOrderStatusFromJSON(json['status']),
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function PaymentOrderToJSON(value?: PaymentOrder | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'issuedProductId': value['issuedProductId'],
        'drawRequestId': value['drawRequestId'],
        'invoiceId': value['invoiceId'],
        'platformInvoiceId': value['platformInvoiceId'],
        'effectiveDate': value['effectiveDate'],
        'settledDate': value['settledDate'],
        'totalPaymentAmountCents': value['totalPaymentAmountCents'],
        'principalPaymentAmountCents': value['principalPaymentAmountCents'],
        'interestPaymentAmountCents': value['interestPaymentAmountCents'],
        'feePaymentAmountCents': value['feePaymentAmountCents'],
        'feeType': value['feeType'],
        'direction': value['direction'],
        'status': PaymentOrderStatusToJSON(value['status']),
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
    };
}

