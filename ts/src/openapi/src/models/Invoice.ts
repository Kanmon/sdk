/* tslint:disable */
/* eslint-disable */
/**
 * Kanmon Public V2 API
 * Kanmon\'s public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InvoicePayorAddress } from './InvoicePayorAddress';
import {
    InvoicePayorAddressFromJSON,
    InvoicePayorAddressFromJSONTyped,
    InvoicePayorAddressToJSON,
} from './InvoicePayorAddress';
import type { InvoiceRepaymentSchedule } from './InvoiceRepaymentSchedule';
import {
    InvoiceRepaymentScheduleFromJSON,
    InvoiceRepaymentScheduleFromJSONTyped,
    InvoiceRepaymentScheduleToJSON,
} from './InvoiceRepaymentSchedule';
import type { InvoiceStatus } from './InvoiceStatus';
import {
    InvoiceStatusFromJSON,
    InvoiceStatusFromJSONTyped,
    InvoiceStatusToJSON,
} from './InvoiceStatus';

/**
 * 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * Kanmon’s unique ID for the invoice.
     * @type {string}
     * @memberof Invoice
     */
    id: string;
    /**
     * Your platform’s unique ID for the invoice.
     * @type {string}
     * @memberof Invoice
     */
    platformInvoiceId: string | null;
    /**
     * Your user-facing identifier for the invoice. This does not need to be unique. This may or may not be the same as your `platformInvoiceId`.
     * @type {string}
     * @memberof Invoice
     */
    platformInvoiceNumber: string | null;
    /**
     * The invoice amount - in cents.
     * @type {number}
     * @memberof Invoice
     */
    invoiceAmountCents: number;
    /**
     * The date when the invoice will be paid by the payor. ISO 8601 date format.
     * @type {string}
     * @memberof Invoice
     */
    invoiceDueDate: string | null;
    /**
     * The date when the payee issued the invoice. ISO 8601 date format.
     * @type {string}
     * @memberof Invoice
     */
    invoiceIssuedDate: string | null;
    /**
     * The email of the payor.
     * @type {string}
     * @memberof Invoice
     */
    payorEmail: string | null;
    /**
     * 
     * @type {InvoicePayorAddress}
     * @memberof Invoice
     */
    payorAddress?: InvoicePayorAddress;
    /**
     * `INDIVIDUAL` if the payor is a person and `BUSINESS` if the payor is a company.
     * @type {string}
     * @memberof Invoice
     */
    payorType: InvoicePayorTypeEnum | null;
    /**
     * The registered name of the payor business when the payor is a business and not an individual.
     * @type {string}
     * @memberof Invoice
     */
    payorBusinessName: string | null;
    /**
     * The first name of the payor when the payor is an individual and not a business.
     * @type {string}
     * @memberof Invoice
     */
    payorFirstName: string | null;
    /**
     * The middle name of the payor when the payor is an individual and not a business.
     * @type {string}
     * @memberof Invoice
     */
    payorMiddleName: string | null;
    /**
     * The last name of the payor when the payor is an individual and not a business.
     * @type {string}
     * @memberof Invoice
     */
    payorLastName: string | null;
    /**
     * 
     * @type {InvoiceStatus}
     * @memberof Invoice
     */
    status: InvoiceStatus;
    /**
     * The unique identifier for the issued product in Kanmon′s system.
     * @type {string}
     * @memberof Invoice
     */
    issuedProductId: string;
    /**
     * The total fee amount - in cents.
     * @type {number}
     * @memberof Invoice
     */
    feeAmountCents: number;
    /**
     * The total principal amount - in cents.
     * @type {number}
     * @memberof Invoice
     */
    principalAmountCents: number;
    /**
     * The amount after fees the business will receive - in cents.
     * @type {number}
     * @memberof Invoice
     */
    invoiceAdvanceAmountCents: number;
    /**
     * The total amount that the business will repay - in cents.
     * @type {number}
     * @memberof Invoice
     */
    repaymentAmountCents: number;
    /**
     * The invoice repayment schedule.
     * @type {InvoiceRepaymentSchedule}
     * @memberof Invoice
     */
    repaymentSchedule: InvoiceRepaymentSchedule;
    /**
     * The percentage of the invoice that is allowed for advances. E.g. a value of `80` would mean that $800 would be advanced on a $1,000 invoice.
     * @type {number}
     * @memberof Invoice
     */
    advanceRatePercentage: number;
    /**
     * The percentage of the transaction that is charged as a fee. E.g. a value of `5` means 5%.
     * @type {number}
     * @memberof Invoice
     */
    transactionFeePercentage: number;
    /**
     * The portion of the invoice amount that the business requests to be financed - in cents.
     * @type {number}
     * @memberof Invoice
     */
    amountRequestedForFinancingCents: number;
    /**
     * Creation UTC ISO 8601 timestamp of the invoice.
     * @type {string}
     * @memberof Invoice
     */
    createdAt: string;
    /**
     * Last updated UTC ISO 8601 timestamp of the invoice.
     * @type {string}
     * @memberof Invoice
     */
    updatedAt: string;
}


/**
 * @export
 */
export const InvoicePayorTypeEnum = {
    Business: 'BUSINESS',
    Individual: 'INDIVIDUAL'
} as const;
export type InvoicePayorTypeEnum = typeof InvoicePayorTypeEnum[keyof typeof InvoicePayorTypeEnum];


/**
 * Check if a given object implements the Invoice interface.
 */
export function instanceOfInvoice(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('platformInvoiceId' in value)) return false;
    if (!('platformInvoiceNumber' in value)) return false;
    if (!('invoiceAmountCents' in value)) return false;
    if (!('invoiceDueDate' in value)) return false;
    if (!('invoiceIssuedDate' in value)) return false;
    if (!('payorEmail' in value)) return false;
    if (!('payorType' in value)) return false;
    if (!('payorBusinessName' in value)) return false;
    if (!('payorFirstName' in value)) return false;
    if (!('payorMiddleName' in value)) return false;
    if (!('payorLastName' in value)) return false;
    if (!('status' in value)) return false;
    if (!('issuedProductId' in value)) return false;
    if (!('feeAmountCents' in value)) return false;
    if (!('principalAmountCents' in value)) return false;
    if (!('invoiceAdvanceAmountCents' in value)) return false;
    if (!('repaymentAmountCents' in value)) return false;
    if (!('repaymentSchedule' in value)) return false;
    if (!('advanceRatePercentage' in value)) return false;
    if (!('transactionFeePercentage' in value)) return false;
    if (!('amountRequestedForFinancingCents' in value)) return false;
    if (!('createdAt' in value)) return false;
    if (!('updatedAt' in value)) return false;
    return true;
}

export function InvoiceFromJSON(json: any): Invoice {
    return InvoiceFromJSONTyped(json, false);
}

export function InvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invoice {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'platformInvoiceId': json['platformInvoiceId'],
        'platformInvoiceNumber': json['platformInvoiceNumber'],
        'invoiceAmountCents': json['invoiceAmountCents'],
        'invoiceDueDate': json['invoiceDueDate'],
        'invoiceIssuedDate': json['invoiceIssuedDate'],
        'payorEmail': json['payorEmail'],
        'payorAddress': json['payorAddress'] == null ? undefined : InvoicePayorAddressFromJSON(json['payorAddress']),
        'payorType': json['payorType'],
        'payorBusinessName': json['payorBusinessName'],
        'payorFirstName': json['payorFirstName'],
        'payorMiddleName': json['payorMiddleName'],
        'payorLastName': json['payorLastName'],
        'status': InvoiceStatusFromJSON(json['status']),
        'issuedProductId': json['issuedProductId'],
        'feeAmountCents': json['feeAmountCents'],
        'principalAmountCents': json['principalAmountCents'],
        'invoiceAdvanceAmountCents': json['invoiceAdvanceAmountCents'],
        'repaymentAmountCents': json['repaymentAmountCents'],
        'repaymentSchedule': InvoiceRepaymentScheduleFromJSON(json['repaymentSchedule']),
        'advanceRatePercentage': json['advanceRatePercentage'],
        'transactionFeePercentage': json['transactionFeePercentage'],
        'amountRequestedForFinancingCents': json['amountRequestedForFinancingCents'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function InvoiceToJSON(value?: Invoice | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'platformInvoiceId': value['platformInvoiceId'],
        'platformInvoiceNumber': value['platformInvoiceNumber'],
        'invoiceAmountCents': value['invoiceAmountCents'],
        'invoiceDueDate': value['invoiceDueDate'],
        'invoiceIssuedDate': value['invoiceIssuedDate'],
        'payorEmail': value['payorEmail'],
        'payorAddress': InvoicePayorAddressToJSON(value['payorAddress']),
        'payorType': value['payorType'],
        'payorBusinessName': value['payorBusinessName'],
        'payorFirstName': value['payorFirstName'],
        'payorMiddleName': value['payorMiddleName'],
        'payorLastName': value['payorLastName'],
        'status': InvoiceStatusToJSON(value['status']),
        'issuedProductId': value['issuedProductId'],
        'feeAmountCents': value['feeAmountCents'],
        'principalAmountCents': value['principalAmountCents'],
        'invoiceAdvanceAmountCents': value['invoiceAdvanceAmountCents'],
        'repaymentAmountCents': value['repaymentAmountCents'],
        'repaymentSchedule': InvoiceRepaymentScheduleToJSON(value['repaymentSchedule']),
        'advanceRatePercentage': value['advanceRatePercentage'],
        'transactionFeePercentage': value['transactionFeePercentage'],
        'amountRequestedForFinancingCents': value['amountRequestedForFinancingCents'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
    };
}

