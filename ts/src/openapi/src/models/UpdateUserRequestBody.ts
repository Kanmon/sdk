/* tslint:disable */
/* eslint-disable */
/**
 * Kanmon Public V2 API
 * Kanmon\'s public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
} from './Address';

/**
 * 
 * @export
 * @interface UpdateUserRequestBody
 */
export interface UpdateUserRequestBody {
    /**
     * The user’s first name.
     * @type {string}
     * @memberof UpdateUserRequestBody
     */
    firstName?: string;
    /**
     * The user’s last name.
     * @type {string}
     * @memberof UpdateUserRequestBody
     */
    lastName?: string;
    /**
     * The user’s phone number. No formatting characters, country code is optional.
     * @type {string}
     * @memberof UpdateUserRequestBody
     */
    phoneNumber?: string;
    /**
     * The user’s address. The address is optional. If you provide the address, you need to provide all the required fields in the address.
     * @type {Address}
     * @memberof UpdateUserRequestBody
     */
    address?: Address;
    /**
     * The user’s email.
     * @type {string}
     * @memberof UpdateUserRequestBody
     */
    email?: string;
    /**
     * The user’s roles. If no roles are defined, the user will be prompted to select a role within Kanmon. <br/><br/>A primary owner is a user with the authority to issue debt on behalf of the business. <br/>This means the user can complete onboarding, receive offers, choose to accept offers, <br/>sign financing agreements, and service an active issued product. <br/><br/>An operator is a user with permission to service an active issued product. Examples are uploading invoices on <br/>behalf of the business, checking the status of payments, etc. <br /><br/>Please note Kanmon supports an additional user role called secondary owners. <br/>Secondary owners are beneficial owners of a business, like primary owners, and Kanmon <br/>must perform KYC checks for these users. Kanmon will handle creating and managing <br/>these users for KYC purposes through a separate process. <br/>
     * @type {Array<string>}
     * @memberof UpdateUserRequestBody
     */
    roles?: Array<UpdateUserRequestBodyRolesEnum>;
    /**
     * Metadata from your system that you want to associate the user with.
     * @type {object}
     * @memberof UpdateUserRequestBody
     */
    metadata?: object;
}


/**
 * @export
 */
export const UpdateUserRequestBodyRolesEnum = {
    OPERATOR: 'OPERATOR',
    PRIMARY_OWNER: 'PRIMARY_OWNER'
} as const;
export type UpdateUserRequestBodyRolesEnum = typeof UpdateUserRequestBodyRolesEnum[keyof typeof UpdateUserRequestBodyRolesEnum];


/**
 * Check if a given object implements the UpdateUserRequestBody interface.
 */
export function instanceOfUpdateUserRequestBody(value: object): value is UpdateUserRequestBody {
    return true;
}

export function UpdateUserRequestBodyFromJSON(json: any): UpdateUserRequestBody {
    return UpdateUserRequestBodyFromJSONTyped(json, false);
}

export function UpdateUserRequestBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateUserRequestBody {
    if (json == null) {
        return json;
    }
    return {
        
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'address': json['address'] == null ? undefined : AddressFromJSON(json['address']),
        'email': json['email'] == null ? undefined : json['email'],
        'roles': json['roles'] == null ? undefined : json['roles'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
    };
}

export function UpdateUserRequestBodyToJSON(value?: UpdateUserRequestBody | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'phoneNumber': value['phoneNumber'],
        'address': AddressToJSON(value['address']),
        'email': value['email'],
        'roles': value['roles'],
        'metadata': value['metadata'],
    };
}

