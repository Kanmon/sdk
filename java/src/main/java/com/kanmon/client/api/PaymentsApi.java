/*
 * Kanmon Public V2 API
 * Kanmon's public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kanmon.client.api;

import com.kanmon.client.ApiCallback;
import com.kanmon.client.ApiClient;
import com.kanmon.client.ApiException;
import com.kanmon.client.ApiResponse;
import com.kanmon.client.Configuration;
import com.kanmon.client.Pair;
import com.kanmon.client.ProgressRequestBody;
import com.kanmon.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kanmon.client.model.BadRequestException;
import java.math.BigDecimal;
import com.kanmon.client.model.ForbiddenException;
import com.kanmon.client.model.GetPaymentScheduleResponse;
import com.kanmon.client.model.InternalServerErrorException;
import com.kanmon.client.model.IssuedProductNotFoundException;
import com.kanmon.client.model.PaymentOrder;
import com.kanmon.client.model.PaymentOrderNotFoundException;
import com.kanmon.client.model.PaymentOrderStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPaymentById
     * @param id The Kanmon payment order UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> PaymentOrderNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/platform/v2/payments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPaymentById(Async)");
        }

        return getPaymentByIdCall(id, _callback);

    }

    /**
     * Fetch a payment
     * 
     * @param id The Kanmon payment order UUID. (required)
     * @return PaymentOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> PaymentOrderNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public PaymentOrder getPaymentById(String id) throws ApiException {
        ApiResponse<PaymentOrder> localVarResp = getPaymentByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch a payment
     * 
     * @param id The Kanmon payment order UUID. (required)
     * @return ApiResponse&lt;PaymentOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> PaymentOrderNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentOrder> getPaymentByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getPaymentByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PaymentOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a payment (asynchronously)
     * 
     * @param id The Kanmon payment order UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> PaymentOrderNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentByIdAsync(String id, final ApiCallback<PaymentOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PaymentOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentScheduleForAIssuedProduct
     * @param id The Kanmon issued product UUID. (required)
     * @param drawRequestIds A comma delimited list of Kanmon’s unique draw request IDs. (optional)
     * @param invoiceIds A comma delimited list of Kanmon’s unique IDs for invoices. (optional)
     * @param platformInvoiceIds A comma delimited list of your platform’s unique IDs for invoices. (optional)
     * @param direction The direction of the payment. (optional)
     * @param status The status of the payment. (optional)
     * @param offset The number of records to skip when performing pagination. Defaults to &#x60;0&#x60;. (optional)
     * @param limit The number of records to limit when performing pagination. Defaults to &#x60;100&#x60;, which is the max. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IssuedProductNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentScheduleForAIssuedProductCall(String id, String drawRequestIds, String invoiceIds, String platformInvoiceIds, String direction, PaymentOrderStatus status, BigDecimal offset, BigDecimal limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/platform/v2/issued-products/{id}/payment-schedule"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (drawRequestIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drawRequestIds", drawRequestIds));
        }

        if (invoiceIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceIds", invoiceIds));
        }

        if (platformInvoiceIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platformInvoiceIds", platformInvoiceIds));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentScheduleForAIssuedProductValidateBeforeCall(String id, String drawRequestIds, String invoiceIds, String platformInvoiceIds, String direction, PaymentOrderStatus status, BigDecimal offset, BigDecimal limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPaymentScheduleForAIssuedProduct(Async)");
        }

        return getPaymentScheduleForAIssuedProductCall(id, drawRequestIds, invoiceIds, platformInvoiceIds, direction, status, offset, limit, _callback);

    }

    /**
     * Fetch payment schedule for an issued product
     * 
     * @param id The Kanmon issued product UUID. (required)
     * @param drawRequestIds A comma delimited list of Kanmon’s unique draw request IDs. (optional)
     * @param invoiceIds A comma delimited list of Kanmon’s unique IDs for invoices. (optional)
     * @param platformInvoiceIds A comma delimited list of your platform’s unique IDs for invoices. (optional)
     * @param direction The direction of the payment. (optional)
     * @param status The status of the payment. (optional)
     * @param offset The number of records to skip when performing pagination. Defaults to &#x60;0&#x60;. (optional)
     * @param limit The number of records to limit when performing pagination. Defaults to &#x60;100&#x60;, which is the max. (optional)
     * @return GetPaymentScheduleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IssuedProductNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentScheduleResponse getPaymentScheduleForAIssuedProduct(String id, String drawRequestIds, String invoiceIds, String platformInvoiceIds, String direction, PaymentOrderStatus status, BigDecimal offset, BigDecimal limit) throws ApiException {
        ApiResponse<GetPaymentScheduleResponse> localVarResp = getPaymentScheduleForAIssuedProductWithHttpInfo(id, drawRequestIds, invoiceIds, platformInvoiceIds, direction, status, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Fetch payment schedule for an issued product
     * 
     * @param id The Kanmon issued product UUID. (required)
     * @param drawRequestIds A comma delimited list of Kanmon’s unique draw request IDs. (optional)
     * @param invoiceIds A comma delimited list of Kanmon’s unique IDs for invoices. (optional)
     * @param platformInvoiceIds A comma delimited list of your platform’s unique IDs for invoices. (optional)
     * @param direction The direction of the payment. (optional)
     * @param status The status of the payment. (optional)
     * @param offset The number of records to skip when performing pagination. Defaults to &#x60;0&#x60;. (optional)
     * @param limit The number of records to limit when performing pagination. Defaults to &#x60;100&#x60;, which is the max. (optional)
     * @return ApiResponse&lt;GetPaymentScheduleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IssuedProductNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPaymentScheduleResponse> getPaymentScheduleForAIssuedProductWithHttpInfo(String id, String drawRequestIds, String invoiceIds, String platformInvoiceIds, String direction, PaymentOrderStatus status, BigDecimal offset, BigDecimal limit) throws ApiException {
        okhttp3.Call localVarCall = getPaymentScheduleForAIssuedProductValidateBeforeCall(id, drawRequestIds, invoiceIds, platformInvoiceIds, direction, status, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetPaymentScheduleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch payment schedule for an issued product (asynchronously)
     * 
     * @param id The Kanmon issued product UUID. (required)
     * @param drawRequestIds A comma delimited list of Kanmon’s unique draw request IDs. (optional)
     * @param invoiceIds A comma delimited list of Kanmon’s unique IDs for invoices. (optional)
     * @param platformInvoiceIds A comma delimited list of your platform’s unique IDs for invoices. (optional)
     * @param direction The direction of the payment. (optional)
     * @param status The status of the payment. (optional)
     * @param offset The number of records to skip when performing pagination. Defaults to &#x60;0&#x60;. (optional)
     * @param limit The number of records to limit when performing pagination. Defaults to &#x60;100&#x60;, which is the max. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IssuedProductNotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentScheduleForAIssuedProductAsync(String id, String drawRequestIds, String invoiceIds, String platformInvoiceIds, String direction, PaymentOrderStatus status, BigDecimal offset, BigDecimal limit, final ApiCallback<GetPaymentScheduleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentScheduleForAIssuedProductValidateBeforeCall(id, drawRequestIds, invoiceIds, platformInvoiceIds, direction, status, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetPaymentScheduleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
