/*
 * Kanmon Public V2 API
 * Kanmon's public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kanmon.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.kanmon.client.JSON;

/**
 * IntegratedMcaReceivable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class IntegratedMcaReceivable {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUED_PRODUCT_ID = "issuedProductId";
  @SerializedName(SERIALIZED_NAME_ISSUED_PRODUCT_ID)
  private String issuedProductId;

  public static final String SERIALIZED_NAME_CHARGE_AMOUNT_CENTS = "chargeAmountCents";
  @SerializedName(SERIALIZED_NAME_CHARGE_AMOUNT_CENTS)
  private BigDecimal chargeAmountCents;

  public static final String SERIALIZED_NAME_REPAYMENT_AMOUNT_CENTS = "repaymentAmountCents";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_AMOUNT_CENTS)
  private BigDecimal repaymentAmountCents;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TRANSACTION_TIME = "transactionTime";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TIME)
  private String transactionTime;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public IntegratedMcaReceivable() {
  }

  public IntegratedMcaReceivable id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Kanmon’s unique ID for the integrated MCA receivable.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public IntegratedMcaReceivable issuedProductId(String issuedProductId) {
    this.issuedProductId = issuedProductId;
    return this;
  }

   /**
   * The unique identifier for the issued product in Kanmon′s system.
   * @return issuedProductId
  **/
  @javax.annotation.Nonnull
  public String getIssuedProductId() {
    return issuedProductId;
  }

  public void setIssuedProductId(String issuedProductId) {
    this.issuedProductId = issuedProductId;
  }


  public IntegratedMcaReceivable chargeAmountCents(BigDecimal chargeAmountCents) {
    this.chargeAmountCents = chargeAmountCents;
    return this;
  }

   /**
   * The charge amount - in cents.
   * @return chargeAmountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getChargeAmountCents() {
    return chargeAmountCents;
  }

  public void setChargeAmountCents(BigDecimal chargeAmountCents) {
    this.chargeAmountCents = chargeAmountCents;
  }


  public IntegratedMcaReceivable repaymentAmountCents(BigDecimal repaymentAmountCents) {
    this.repaymentAmountCents = repaymentAmountCents;
    return this;
  }

   /**
   * The repayment amount - in cents. It should be the minimum between (repayment percentage * charge amount) or remaining balance.
   * @return repaymentAmountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getRepaymentAmountCents() {
    return repaymentAmountCents;
  }

  public void setRepaymentAmountCents(BigDecimal repaymentAmountCents) {
    this.repaymentAmountCents = repaymentAmountCents;
  }


  public IntegratedMcaReceivable transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Your platform’s unique ID for the transaction.
   * @return transactionId
  **/
  @javax.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public IntegratedMcaReceivable transactionTime(String transactionTime) {
    this.transactionTime = transactionTime;
    return this;
  }

   /**
   * Creation UTC ISO 8601 timestamp of the transaction.
   * @return transactionTime
  **/
  @javax.annotation.Nonnull
  public String getTransactionTime() {
    return transactionTime;
  }

  public void setTransactionTime(String transactionTime) {
    this.transactionTime = transactionTime;
  }


  public IntegratedMcaReceivable createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation UTC ISO 8601 timestamp of the receivable.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public IntegratedMcaReceivable updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Last updated UTC ISO 8601 timestamp of the receivable.
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegratedMcaReceivable integratedMcaReceivable = (IntegratedMcaReceivable) o;
    return Objects.equals(this.id, integratedMcaReceivable.id) &&
        Objects.equals(this.issuedProductId, integratedMcaReceivable.issuedProductId) &&
        Objects.equals(this.chargeAmountCents, integratedMcaReceivable.chargeAmountCents) &&
        Objects.equals(this.repaymentAmountCents, integratedMcaReceivable.repaymentAmountCents) &&
        Objects.equals(this.transactionId, integratedMcaReceivable.transactionId) &&
        Objects.equals(this.transactionTime, integratedMcaReceivable.transactionTime) &&
        Objects.equals(this.createdAt, integratedMcaReceivable.createdAt) &&
        Objects.equals(this.updatedAt, integratedMcaReceivable.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, issuedProductId, chargeAmountCents, repaymentAmountCents, transactionId, transactionTime, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegratedMcaReceivable {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuedProductId: ").append(toIndentedString(issuedProductId)).append("\n");
    sb.append("    chargeAmountCents: ").append(toIndentedString(chargeAmountCents)).append("\n");
    sb.append("    repaymentAmountCents: ").append(toIndentedString(repaymentAmountCents)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionTime: ").append(toIndentedString(transactionTime)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("issuedProductId");
    openapiFields.add("chargeAmountCents");
    openapiFields.add("repaymentAmountCents");
    openapiFields.add("transactionId");
    openapiFields.add("transactionTime");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("issuedProductId");
    openapiRequiredFields.add("chargeAmountCents");
    openapiRequiredFields.add("repaymentAmountCents");
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("transactionTime");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IntegratedMcaReceivable
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegratedMcaReceivable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegratedMcaReceivable is not found in the empty JSON string", IntegratedMcaReceivable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntegratedMcaReceivable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegratedMcaReceivable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IntegratedMcaReceivable.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("issuedProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuedProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuedProductId").toString()));
      }
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("transactionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionTime").toString()));
      }
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegratedMcaReceivable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegratedMcaReceivable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegratedMcaReceivable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegratedMcaReceivable.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegratedMcaReceivable>() {
           @Override
           public void write(JsonWriter out, IntegratedMcaReceivable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegratedMcaReceivable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntegratedMcaReceivable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntegratedMcaReceivable
  * @throws IOException if the JSON string is invalid with respect to IntegratedMcaReceivable
  */
  public static IntegratedMcaReceivable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegratedMcaReceivable.class);
  }

 /**
  * Convert an instance of IntegratedMcaReceivable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

