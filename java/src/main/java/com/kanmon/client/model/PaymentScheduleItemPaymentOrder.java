/*
 * Kanmon Public V2 API
 * Kanmon's public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kanmon.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kanmon.client.model.PaymentOrderStatus;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.kanmon.client.JSON;

/**
 * The payment order for this schedule item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-18T19:11:29.794846-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class PaymentScheduleItemPaymentOrder {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUED_PRODUCT_ID = "issuedProductId";
  @SerializedName(SERIALIZED_NAME_ISSUED_PRODUCT_ID)
  private String issuedProductId;

  public static final String SERIALIZED_NAME_DRAW_REQUEST_ID = "drawRequestId";
  @SerializedName(SERIALIZED_NAME_DRAW_REQUEST_ID)
  private String drawRequestId;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_PLATFORM_INVOICE_ID = "platformInvoiceId";
  @SerializedName(SERIALIZED_NAME_PLATFORM_INVOICE_ID)
  private String platformInvoiceId;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private String effectiveDate;

  public static final String SERIALIZED_NAME_SETTLED_DATE = "settledDate";
  @SerializedName(SERIALIZED_NAME_SETTLED_DATE)
  private String settledDate;

  public static final String SERIALIZED_NAME_TOTAL_PAYMENT_AMOUNT_CENTS = "totalPaymentAmountCents";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAYMENT_AMOUNT_CENTS)
  private BigDecimal totalPaymentAmountCents;

  public static final String SERIALIZED_NAME_PRINCIPAL_PAYMENT_AMOUNT_CENTS = "principalPaymentAmountCents";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_PAYMENT_AMOUNT_CENTS)
  private BigDecimal principalPaymentAmountCents;

  public static final String SERIALIZED_NAME_INTEREST_PAYMENT_AMOUNT_CENTS = "interestPaymentAmountCents";
  @SerializedName(SERIALIZED_NAME_INTEREST_PAYMENT_AMOUNT_CENTS)
  private BigDecimal interestPaymentAmountCents;

  public static final String SERIALIZED_NAME_FEE_PAYMENT_AMOUNT_CENTS = "feePaymentAmountCents";
  @SerializedName(SERIALIZED_NAME_FEE_PAYMENT_AMOUNT_CENTS)
  private BigDecimal feePaymentAmountCents;

  /**
   * The type of the fee that was charged. (only present when &#x60;feePaymentAmountCents&#x60; is not 0 or null).
   */
  @JsonAdapter(FeeTypeEnum.Adapter.class)
  public enum FeeTypeEnum {
    LATE_PAYMENT("LATE_PAYMENT"),
    
    INSUFFICIENT_FUNDS("INSUFFICIENT_FUNDS"),
    
    TRANSACTION_FEE("TRANSACTION_FEE"),
    
    MAINTENANCE("MAINTENANCE");

    private String value;

    FeeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeTypeEnum fromValue(String value) {
      for (FeeTypeEnum b : FeeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FeeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEE_TYPE = "feeType";
  @SerializedName(SERIALIZED_NAME_FEE_TYPE)
  private FeeTypeEnum feeType;

  /**
   * The direction of the payment.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    DISBURSEMENT("DISBURSEMENT"),
    
    REPAYMENT("REPAYMENT");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PaymentOrderStatus status;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public PaymentScheduleItemPaymentOrder() {
  }

  public PaymentScheduleItemPaymentOrder id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The UUID representing the payment order in Kanmon.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PaymentScheduleItemPaymentOrder issuedProductId(String issuedProductId) {
    this.issuedProductId = issuedProductId;
    return this;
  }

   /**
   * The UUID representing the issued product in Kanmon.
   * @return issuedProductId
  **/
  @javax.annotation.Nonnull
  public String getIssuedProductId() {
    return issuedProductId;
  }

  public void setIssuedProductId(String issuedProductId) {
    this.issuedProductId = issuedProductId;
  }


  public PaymentScheduleItemPaymentOrder drawRequestId(String drawRequestId) {
    this.drawRequestId = drawRequestId;
    return this;
  }

   /**
   * The UUID representing the draw request in Kanmon. (only present for Line of Credit).
   * @return drawRequestId
  **/
  @javax.annotation.Nullable
  public String getDrawRequestId() {
    return drawRequestId;
  }

  public void setDrawRequestId(String drawRequestId) {
    this.drawRequestId = drawRequestId;
  }


  public PaymentScheduleItemPaymentOrder invoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
    return this;
  }

   /**
   * The UUID representing the invoice in Kanmon. (only present for Invoice Financing).
   * @return invoiceId
  **/
  @javax.annotation.Nullable
  public String getInvoiceId() {
    return invoiceId;
  }

  public void setInvoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
  }


  public PaymentScheduleItemPaymentOrder platformInvoiceId(String platformInvoiceId) {
    this.platformInvoiceId = platformInvoiceId;
    return this;
  }

   /**
   * Your platformâ€™s unique ID for the invoice. (only present for Invoice Financing).
   * @return platformInvoiceId
  **/
  @javax.annotation.Nullable
  public String getPlatformInvoiceId() {
    return platformInvoiceId;
  }

  public void setPlatformInvoiceId(String platformInvoiceId) {
    this.platformInvoiceId = platformInvoiceId;
  }


  public PaymentScheduleItemPaymentOrder effectiveDate(String effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * The effective UTC ISO 8601 date that the payment will process.
   * @return effectiveDate
  **/
  @javax.annotation.Nonnull
  public String getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(String effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public PaymentScheduleItemPaymentOrder settledDate(String settledDate) {
    this.settledDate = settledDate;
    return this;
  }

   /**
   * The UTC ISO 8601 date that the payment was settled.
   * @return settledDate
  **/
  @javax.annotation.Nullable
  public String getSettledDate() {
    return settledDate;
  }

  public void setSettledDate(String settledDate) {
    this.settledDate = settledDate;
  }


  public PaymentScheduleItemPaymentOrder totalPaymentAmountCents(BigDecimal totalPaymentAmountCents) {
    this.totalPaymentAmountCents = totalPaymentAmountCents;
    return this;
  }

   /**
   * The total payment amount - in cents.
   * @return totalPaymentAmountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getTotalPaymentAmountCents() {
    return totalPaymentAmountCents;
  }

  public void setTotalPaymentAmountCents(BigDecimal totalPaymentAmountCents) {
    this.totalPaymentAmountCents = totalPaymentAmountCents;
  }


  public PaymentScheduleItemPaymentOrder principalPaymentAmountCents(BigDecimal principalPaymentAmountCents) {
    this.principalPaymentAmountCents = principalPaymentAmountCents;
    return this;
  }

   /**
   * The principal payment amount - in cents. (null for disbursements).
   * @return principalPaymentAmountCents
  **/
  @javax.annotation.Nullable
  public BigDecimal getPrincipalPaymentAmountCents() {
    return principalPaymentAmountCents;
  }

  public void setPrincipalPaymentAmountCents(BigDecimal principalPaymentAmountCents) {
    this.principalPaymentAmountCents = principalPaymentAmountCents;
  }


  public PaymentScheduleItemPaymentOrder interestPaymentAmountCents(BigDecimal interestPaymentAmountCents) {
    this.interestPaymentAmountCents = interestPaymentAmountCents;
    return this;
  }

   /**
   * The interest payment amount - in cents. (null for disbursements).
   * @return interestPaymentAmountCents
  **/
  @javax.annotation.Nullable
  public BigDecimal getInterestPaymentAmountCents() {
    return interestPaymentAmountCents;
  }

  public void setInterestPaymentAmountCents(BigDecimal interestPaymentAmountCents) {
    this.interestPaymentAmountCents = interestPaymentAmountCents;
  }


  public PaymentScheduleItemPaymentOrder feePaymentAmountCents(BigDecimal feePaymentAmountCents) {
    this.feePaymentAmountCents = feePaymentAmountCents;
    return this;
  }

   /**
   * The fee payment amount - in cents. (null for disbursements).
   * @return feePaymentAmountCents
  **/
  @javax.annotation.Nullable
  public BigDecimal getFeePaymentAmountCents() {
    return feePaymentAmountCents;
  }

  public void setFeePaymentAmountCents(BigDecimal feePaymentAmountCents) {
    this.feePaymentAmountCents = feePaymentAmountCents;
  }


  public PaymentScheduleItemPaymentOrder feeType(FeeTypeEnum feeType) {
    this.feeType = feeType;
    return this;
  }

   /**
   * The type of the fee that was charged. (only present when &#x60;feePaymentAmountCents&#x60; is not 0 or null).
   * @return feeType
  **/
  @javax.annotation.Nullable
  public FeeTypeEnum getFeeType() {
    return feeType;
  }

  public void setFeeType(FeeTypeEnum feeType) {
    this.feeType = feeType;
  }


  public PaymentScheduleItemPaymentOrder direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * The direction of the payment.
   * @return direction
  **/
  @javax.annotation.Nonnull
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public PaymentScheduleItemPaymentOrder status(PaymentOrderStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public PaymentOrderStatus getStatus() {
    return status;
  }

  public void setStatus(PaymentOrderStatus status) {
    this.status = status;
  }


  public PaymentScheduleItemPaymentOrder createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation UTC ISO 8601 timestamp of the payment order.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PaymentScheduleItemPaymentOrder updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Last updated UTC ISO 8601 timestamp of the payment order.
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentScheduleItemPaymentOrder paymentScheduleItemPaymentOrder = (PaymentScheduleItemPaymentOrder) o;
    return Objects.equals(this.id, paymentScheduleItemPaymentOrder.id) &&
        Objects.equals(this.issuedProductId, paymentScheduleItemPaymentOrder.issuedProductId) &&
        Objects.equals(this.drawRequestId, paymentScheduleItemPaymentOrder.drawRequestId) &&
        Objects.equals(this.invoiceId, paymentScheduleItemPaymentOrder.invoiceId) &&
        Objects.equals(this.platformInvoiceId, paymentScheduleItemPaymentOrder.platformInvoiceId) &&
        Objects.equals(this.effectiveDate, paymentScheduleItemPaymentOrder.effectiveDate) &&
        Objects.equals(this.settledDate, paymentScheduleItemPaymentOrder.settledDate) &&
        Objects.equals(this.totalPaymentAmountCents, paymentScheduleItemPaymentOrder.totalPaymentAmountCents) &&
        Objects.equals(this.principalPaymentAmountCents, paymentScheduleItemPaymentOrder.principalPaymentAmountCents) &&
        Objects.equals(this.interestPaymentAmountCents, paymentScheduleItemPaymentOrder.interestPaymentAmountCents) &&
        Objects.equals(this.feePaymentAmountCents, paymentScheduleItemPaymentOrder.feePaymentAmountCents) &&
        Objects.equals(this.feeType, paymentScheduleItemPaymentOrder.feeType) &&
        Objects.equals(this.direction, paymentScheduleItemPaymentOrder.direction) &&
        Objects.equals(this.status, paymentScheduleItemPaymentOrder.status) &&
        Objects.equals(this.createdAt, paymentScheduleItemPaymentOrder.createdAt) &&
        Objects.equals(this.updatedAt, paymentScheduleItemPaymentOrder.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, issuedProductId, drawRequestId, invoiceId, platformInvoiceId, effectiveDate, settledDate, totalPaymentAmountCents, principalPaymentAmountCents, interestPaymentAmountCents, feePaymentAmountCents, feeType, direction, status, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentScheduleItemPaymentOrder {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuedProductId: ").append(toIndentedString(issuedProductId)).append("\n");
    sb.append("    drawRequestId: ").append(toIndentedString(drawRequestId)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    platformInvoiceId: ").append(toIndentedString(platformInvoiceId)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    settledDate: ").append(toIndentedString(settledDate)).append("\n");
    sb.append("    totalPaymentAmountCents: ").append(toIndentedString(totalPaymentAmountCents)).append("\n");
    sb.append("    principalPaymentAmountCents: ").append(toIndentedString(principalPaymentAmountCents)).append("\n");
    sb.append("    interestPaymentAmountCents: ").append(toIndentedString(interestPaymentAmountCents)).append("\n");
    sb.append("    feePaymentAmountCents: ").append(toIndentedString(feePaymentAmountCents)).append("\n");
    sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("issuedProductId");
    openapiFields.add("drawRequestId");
    openapiFields.add("invoiceId");
    openapiFields.add("platformInvoiceId");
    openapiFields.add("effectiveDate");
    openapiFields.add("settledDate");
    openapiFields.add("totalPaymentAmountCents");
    openapiFields.add("principalPaymentAmountCents");
    openapiFields.add("interestPaymentAmountCents");
    openapiFields.add("feePaymentAmountCents");
    openapiFields.add("feeType");
    openapiFields.add("direction");
    openapiFields.add("status");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("issuedProductId");
    openapiRequiredFields.add("drawRequestId");
    openapiRequiredFields.add("invoiceId");
    openapiRequiredFields.add("platformInvoiceId");
    openapiRequiredFields.add("effectiveDate");
    openapiRequiredFields.add("settledDate");
    openapiRequiredFields.add("totalPaymentAmountCents");
    openapiRequiredFields.add("principalPaymentAmountCents");
    openapiRequiredFields.add("interestPaymentAmountCents");
    openapiRequiredFields.add("feePaymentAmountCents");
    openapiRequiredFields.add("feeType");
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaymentScheduleItemPaymentOrder
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentScheduleItemPaymentOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentScheduleItemPaymentOrder is not found in the empty JSON string", PaymentScheduleItemPaymentOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentScheduleItemPaymentOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentScheduleItemPaymentOrder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentScheduleItemPaymentOrder.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("issuedProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuedProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuedProductId").toString()));
      }
      if ((jsonObj.get("drawRequestId") != null && !jsonObj.get("drawRequestId").isJsonNull()) && !jsonObj.get("drawRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drawRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drawRequestId").toString()));
      }
      if ((jsonObj.get("invoiceId") != null && !jsonObj.get("invoiceId").isJsonNull()) && !jsonObj.get("invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceId").toString()));
      }
      if ((jsonObj.get("platformInvoiceId") != null && !jsonObj.get("platformInvoiceId").isJsonNull()) && !jsonObj.get("platformInvoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformInvoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformInvoiceId").toString()));
      }
      if (!jsonObj.get("effectiveDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveDate").toString()));
      }
      if ((jsonObj.get("settledDate") != null && !jsonObj.get("settledDate").isJsonNull()) && !jsonObj.get("settledDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settledDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settledDate").toString()));
      }
      if ((jsonObj.get("feeType") != null && !jsonObj.get("feeType").isJsonNull()) && !jsonObj.get("feeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeType").toString()));
      }
      // validate the required field `feeType`
      FeeTypeEnum.validateJsonElement(jsonObj.get("feeType"));
      if (!jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the required field `direction`
      DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      // validate the required field `status`
      PaymentOrderStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentScheduleItemPaymentOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentScheduleItemPaymentOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentScheduleItemPaymentOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentScheduleItemPaymentOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentScheduleItemPaymentOrder>() {
           @Override
           public void write(JsonWriter out, PaymentScheduleItemPaymentOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentScheduleItemPaymentOrder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentScheduleItemPaymentOrder given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentScheduleItemPaymentOrder
  * @throws IOException if the JSON string is invalid with respect to PaymentScheduleItemPaymentOrder
  */
  public static PaymentScheduleItemPaymentOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentScheduleItemPaymentOrder.class);
  }

 /**
  * Convert an instance of PaymentScheduleItemPaymentOrder to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

