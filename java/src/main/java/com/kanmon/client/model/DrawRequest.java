/*
 * Kanmon Public V2 API
 * Kanmon's public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kanmon.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kanmon.client.model.DrawRequestState;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.kanmon.client.JSON;

/**
 * DrawRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-26T19:00:57.767815-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class DrawRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUED_PRODUCT_ID = "issuedProductId";
  @SerializedName(SERIALIZED_NAME_ISSUED_PRODUCT_ID)
  private String issuedProductId;

  public static final String SERIALIZED_NAME_AMOUNT_CENTS = "amountCents";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CENTS)
  private BigDecimal amountCents;

  public static final String SERIALIZED_NAME_DISBURSEMENT_AMOUNT_CENTS = "disbursementAmountCents";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENT_AMOUNT_CENTS)
  private BigDecimal disbursementAmountCents;

  public static final String SERIALIZED_NAME_FEE_AMOUNT_CENTS = "feeAmountCents";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT_CENTS)
  private BigDecimal feeAmountCents;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DrawRequestState status;

  public static final String SERIALIZED_NAME_INTEREST_RATE_PERCENTAGE = "interestRatePercentage";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE_PERCENTAGE)
  private BigDecimal interestRatePercentage;

  public static final String SERIALIZED_NAME_FEE_PERCENTAGE = "feePercentage";
  @SerializedName(SERIALIZED_NAME_FEE_PERCENTAGE)
  private BigDecimal feePercentage;

  public static final String SERIALIZED_NAME_REPAYMENT_DURATION_MONTHS = "repaymentDurationMonths";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_DURATION_MONTHS)
  private BigDecimal repaymentDurationMonths;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public DrawRequest() {
  }

  public DrawRequest id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Kanmonâ€™s unique ID for the draw request.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DrawRequest issuedProductId(String issuedProductId) {
    this.issuedProductId = issuedProductId;
    return this;
  }

   /**
   * The UUID representing the issued product in Kanmon.
   * @return issuedProductId
  **/
  @javax.annotation.Nonnull
  public String getIssuedProductId() {
    return issuedProductId;
  }

  public void setIssuedProductId(String issuedProductId) {
    this.issuedProductId = issuedProductId;
  }


  public DrawRequest amountCents(BigDecimal amountCents) {
    this.amountCents = amountCents;
    return this;
  }

   /**
   * The total draw request amount - in cents.
   * @return amountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getAmountCents() {
    return amountCents;
  }

  public void setAmountCents(BigDecimal amountCents) {
    this.amountCents = amountCents;
  }


  public DrawRequest disbursementAmountCents(BigDecimal disbursementAmountCents) {
    this.disbursementAmountCents = disbursementAmountCents;
    return this;
  }

   /**
   * The total draw request amount, less the fees - in cents. This is the amount disbursed to the business if the draw request is approved.
   * @return disbursementAmountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getDisbursementAmountCents() {
    return disbursementAmountCents;
  }

  public void setDisbursementAmountCents(BigDecimal disbursementAmountCents) {
    this.disbursementAmountCents = disbursementAmountCents;
  }


  public DrawRequest feeAmountCents(BigDecimal feeAmountCents) {
    this.feeAmountCents = feeAmountCents;
    return this;
  }

   /**
   * The fee amount - in cents.
   * @return feeAmountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getFeeAmountCents() {
    return feeAmountCents;
  }

  public void setFeeAmountCents(BigDecimal feeAmountCents) {
    this.feeAmountCents = feeAmountCents;
  }


  public DrawRequest status(DrawRequestState status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public DrawRequestState getStatus() {
    return status;
  }

  public void setStatus(DrawRequestState status) {
    this.status = status;
  }


  public DrawRequest interestRatePercentage(BigDecimal interestRatePercentage) {
    this.interestRatePercentage = interestRatePercentage;
    return this;
  }

   /**
   * The interest rate for the draw request. E.g. a value of &#x60;10&#x60; means 10%.
   * @return interestRatePercentage
  **/
  @javax.annotation.Nonnull
  public BigDecimal getInterestRatePercentage() {
    return interestRatePercentage;
  }

  public void setInterestRatePercentage(BigDecimal interestRatePercentage) {
    this.interestRatePercentage = interestRatePercentage;
  }


  public DrawRequest feePercentage(BigDecimal feePercentage) {
    this.feePercentage = feePercentage;
    return this;
  }

   /**
   * The fee percentage charged as the borrowing cost of the draw request. E.g. a value of &#x60;2&#x60; means a 2% fee.
   * @return feePercentage
  **/
  @javax.annotation.Nonnull
  public BigDecimal getFeePercentage() {
    return feePercentage;
  }

  public void setFeePercentage(BigDecimal feePercentage) {
    this.feePercentage = feePercentage;
  }


  public DrawRequest repaymentDurationMonths(BigDecimal repaymentDurationMonths) {
    this.repaymentDurationMonths = repaymentDurationMonths;
    return this;
  }

   /**
   * The duration of the repayment for the draw request - in months.
   * @return repaymentDurationMonths
  **/
  @javax.annotation.Nonnull
  public BigDecimal getRepaymentDurationMonths() {
    return repaymentDurationMonths;
  }

  public void setRepaymentDurationMonths(BigDecimal repaymentDurationMonths) {
    this.repaymentDurationMonths = repaymentDurationMonths;
  }


  public DrawRequest createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation UTC ISO 8601 timestamp of the draw request.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public DrawRequest updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Last updated UTC ISO 8601 timestamp of the draw request.
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrawRequest drawRequest = (DrawRequest) o;
    return Objects.equals(this.id, drawRequest.id) &&
        Objects.equals(this.issuedProductId, drawRequest.issuedProductId) &&
        Objects.equals(this.amountCents, drawRequest.amountCents) &&
        Objects.equals(this.disbursementAmountCents, drawRequest.disbursementAmountCents) &&
        Objects.equals(this.feeAmountCents, drawRequest.feeAmountCents) &&
        Objects.equals(this.status, drawRequest.status) &&
        Objects.equals(this.interestRatePercentage, drawRequest.interestRatePercentage) &&
        Objects.equals(this.feePercentage, drawRequest.feePercentage) &&
        Objects.equals(this.repaymentDurationMonths, drawRequest.repaymentDurationMonths) &&
        Objects.equals(this.createdAt, drawRequest.createdAt) &&
        Objects.equals(this.updatedAt, drawRequest.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, issuedProductId, amountCents, disbursementAmountCents, feeAmountCents, status, interestRatePercentage, feePercentage, repaymentDurationMonths, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrawRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuedProductId: ").append(toIndentedString(issuedProductId)).append("\n");
    sb.append("    amountCents: ").append(toIndentedString(amountCents)).append("\n");
    sb.append("    disbursementAmountCents: ").append(toIndentedString(disbursementAmountCents)).append("\n");
    sb.append("    feeAmountCents: ").append(toIndentedString(feeAmountCents)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    interestRatePercentage: ").append(toIndentedString(interestRatePercentage)).append("\n");
    sb.append("    feePercentage: ").append(toIndentedString(feePercentage)).append("\n");
    sb.append("    repaymentDurationMonths: ").append(toIndentedString(repaymentDurationMonths)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("issuedProductId");
    openapiFields.add("amountCents");
    openapiFields.add("disbursementAmountCents");
    openapiFields.add("feeAmountCents");
    openapiFields.add("status");
    openapiFields.add("interestRatePercentage");
    openapiFields.add("feePercentage");
    openapiFields.add("repaymentDurationMonths");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("issuedProductId");
    openapiRequiredFields.add("amountCents");
    openapiRequiredFields.add("disbursementAmountCents");
    openapiRequiredFields.add("feeAmountCents");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("interestRatePercentage");
    openapiRequiredFields.add("feePercentage");
    openapiRequiredFields.add("repaymentDurationMonths");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DrawRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DrawRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DrawRequest is not found in the empty JSON string", DrawRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DrawRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DrawRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DrawRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("issuedProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuedProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuedProductId").toString()));
      }
      // validate the required field `status`
      DrawRequestState.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DrawRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DrawRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DrawRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DrawRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DrawRequest>() {
           @Override
           public void write(JsonWriter out, DrawRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DrawRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DrawRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DrawRequest
  * @throws IOException if the JSON string is invalid with respect to DrawRequest
  */
  public static DrawRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DrawRequest.class);
  }

 /**
  * Convert an instance of DrawRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

