/*
 * Kanmon Public V2 API
 * Kanmon's public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kanmon.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kanmon.client.model.ProductType;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.kanmon.client.JSON;

/**
 * TermLoanServicingData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class TermLoanServicingData {
  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private ProductType productType;

  public static final String SERIALIZED_NAME_LOAN_AMOUNT_CENTS = "loanAmountCents";
  @SerializedName(SERIALIZED_NAME_LOAN_AMOUNT_CENTS)
  private BigDecimal loanAmountCents;

  public static final String SERIALIZED_NAME_ORIGINATION_FEE_CENTS = "originationFeeCents";
  @SerializedName(SERIALIZED_NAME_ORIGINATION_FEE_CENTS)
  private BigDecimal originationFeeCents;

  public static final String SERIALIZED_NAME_PRINCIPAL_BALANCE_CENTS = "principalBalanceCents";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_BALANCE_CENTS)
  private BigDecimal principalBalanceCents;

  public static final String SERIALIZED_NAME_MONTHLY_PAYMENT_CENTS = "monthlyPaymentCents";
  @SerializedName(SERIALIZED_NAME_MONTHLY_PAYMENT_CENTS)
  private BigDecimal monthlyPaymentCents;

  public static final String SERIALIZED_NAME_INTEREST_RATE = "interestRate";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE)
  private BigDecimal interestRate;

  public static final String SERIALIZED_NAME_NEXT_PAYMENT_DATE = "nextPaymentDate";
  @SerializedName(SERIALIZED_NAME_NEXT_PAYMENT_DATE)
  private String nextPaymentDate;

  public TermLoanServicingData() {
  }

  public TermLoanServicingData productType(ProductType productType) {
    this.productType = productType;
    return this;
  }

  /**
   * Get productType
   * @return productType
   */
  @javax.annotation.Nonnull
  public ProductType getProductType() {
    return productType;
  }

  public void setProductType(ProductType productType) {
    this.productType = productType;
  }


  public TermLoanServicingData loanAmountCents(BigDecimal loanAmountCents) {
    this.loanAmountCents = loanAmountCents;
    return this;
  }

  /**
   * The total loan amount - in cents.
   * @return loanAmountCents
   */
  @javax.annotation.Nonnull
  public BigDecimal getLoanAmountCents() {
    return loanAmountCents;
  }

  public void setLoanAmountCents(BigDecimal loanAmountCents) {
    this.loanAmountCents = loanAmountCents;
  }


  public TermLoanServicingData originationFeeCents(BigDecimal originationFeeCents) {
    this.originationFeeCents = originationFeeCents;
    return this;
  }

  /**
   * The total origination fee amount - in cents.
   * @return originationFeeCents
   */
  @javax.annotation.Nonnull
  public BigDecimal getOriginationFeeCents() {
    return originationFeeCents;
  }

  public void setOriginationFeeCents(BigDecimal originationFeeCents) {
    this.originationFeeCents = originationFeeCents;
  }


  public TermLoanServicingData principalBalanceCents(BigDecimal principalBalanceCents) {
    this.principalBalanceCents = principalBalanceCents;
    return this;
  }

  /**
   * The principal remaining on the loan - in cents.
   * @return principalBalanceCents
   */
  @javax.annotation.Nonnull
  public BigDecimal getPrincipalBalanceCents() {
    return principalBalanceCents;
  }

  public void setPrincipalBalanceCents(BigDecimal principalBalanceCents) {
    this.principalBalanceCents = principalBalanceCents;
  }


  public TermLoanServicingData monthlyPaymentCents(BigDecimal monthlyPaymentCents) {
    this.monthlyPaymentCents = monthlyPaymentCents;
    return this;
  }

  /**
   * The monthly payment amount - in cents.
   * @return monthlyPaymentCents
   */
  @javax.annotation.Nonnull
  public BigDecimal getMonthlyPaymentCents() {
    return monthlyPaymentCents;
  }

  public void setMonthlyPaymentCents(BigDecimal monthlyPaymentCents) {
    this.monthlyPaymentCents = monthlyPaymentCents;
  }


  public TermLoanServicingData interestRate(BigDecimal interestRate) {
    this.interestRate = interestRate;
    return this;
  }

  /**
   * The interest rate of the loan. E.g. a value of &#x60;10&#x60; means 10%.
   * @return interestRate
   */
  @javax.annotation.Nonnull
  public BigDecimal getInterestRate() {
    return interestRate;
  }

  public void setInterestRate(BigDecimal interestRate) {
    this.interestRate = interestRate;
  }


  public TermLoanServicingData nextPaymentDate(String nextPaymentDate) {
    this.nextPaymentDate = nextPaymentDate;
    return this;
  }

  /**
   * The next scheduled payment date - ISO 8601 date format.
   * @return nextPaymentDate
   */
  @javax.annotation.Nullable
  public String getNextPaymentDate() {
    return nextPaymentDate;
  }

  public void setNextPaymentDate(String nextPaymentDate) {
    this.nextPaymentDate = nextPaymentDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TermLoanServicingData termLoanServicingData = (TermLoanServicingData) o;
    return Objects.equals(this.productType, termLoanServicingData.productType) &&
        Objects.equals(this.loanAmountCents, termLoanServicingData.loanAmountCents) &&
        Objects.equals(this.originationFeeCents, termLoanServicingData.originationFeeCents) &&
        Objects.equals(this.principalBalanceCents, termLoanServicingData.principalBalanceCents) &&
        Objects.equals(this.monthlyPaymentCents, termLoanServicingData.monthlyPaymentCents) &&
        Objects.equals(this.interestRate, termLoanServicingData.interestRate) &&
        Objects.equals(this.nextPaymentDate, termLoanServicingData.nextPaymentDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productType, loanAmountCents, originationFeeCents, principalBalanceCents, monthlyPaymentCents, interestRate, nextPaymentDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TermLoanServicingData {\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    loanAmountCents: ").append(toIndentedString(loanAmountCents)).append("\n");
    sb.append("    originationFeeCents: ").append(toIndentedString(originationFeeCents)).append("\n");
    sb.append("    principalBalanceCents: ").append(toIndentedString(principalBalanceCents)).append("\n");
    sb.append("    monthlyPaymentCents: ").append(toIndentedString(monthlyPaymentCents)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    nextPaymentDate: ").append(toIndentedString(nextPaymentDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productType");
    openapiFields.add("loanAmountCents");
    openapiFields.add("originationFeeCents");
    openapiFields.add("principalBalanceCents");
    openapiFields.add("monthlyPaymentCents");
    openapiFields.add("interestRate");
    openapiFields.add("nextPaymentDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("productType");
    openapiRequiredFields.add("loanAmountCents");
    openapiRequiredFields.add("originationFeeCents");
    openapiRequiredFields.add("principalBalanceCents");
    openapiRequiredFields.add("monthlyPaymentCents");
    openapiRequiredFields.add("interestRate");
    openapiRequiredFields.add("nextPaymentDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TermLoanServicingData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TermLoanServicingData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TermLoanServicingData is not found in the empty JSON string", TermLoanServicingData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TermLoanServicingData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TermLoanServicingData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TermLoanServicingData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `productType`
      ProductType.validateJsonElement(jsonObj.get("productType"));
      if ((jsonObj.get("nextPaymentDate") != null && !jsonObj.get("nextPaymentDate").isJsonNull()) && !jsonObj.get("nextPaymentDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPaymentDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPaymentDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TermLoanServicingData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TermLoanServicingData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TermLoanServicingData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TermLoanServicingData.class));

       return (TypeAdapter<T>) new TypeAdapter<TermLoanServicingData>() {
           @Override
           public void write(JsonWriter out, TermLoanServicingData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TermLoanServicingData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TermLoanServicingData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TermLoanServicingData
   * @throws IOException if the JSON string is invalid with respect to TermLoanServicingData
   */
  public static TermLoanServicingData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TermLoanServicingData.class);
  }

  /**
   * Convert an instance of TermLoanServicingData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

