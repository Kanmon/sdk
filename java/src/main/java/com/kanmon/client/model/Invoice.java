/*
 * Kanmon Public V2 API
 * Kanmon's public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kanmon.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kanmon.client.model.InvoicePayorAddress;
import com.kanmon.client.model.InvoiceRepaymentSchedule;
import com.kanmon.client.model.InvoiceStatus;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.kanmon.client.JSON;

/**
 * Invoice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-02T17:11:18.940267-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class Invoice {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PLATFORM_INVOICE_ID = "platformInvoiceId";
  @SerializedName(SERIALIZED_NAME_PLATFORM_INVOICE_ID)
  private String platformInvoiceId;

  public static final String SERIALIZED_NAME_PLATFORM_INVOICE_NUMBER = "platformInvoiceNumber";
  @SerializedName(SERIALIZED_NAME_PLATFORM_INVOICE_NUMBER)
  private String platformInvoiceNumber;

  public static final String SERIALIZED_NAME_INVOICE_AMOUNT_CENTS = "invoiceAmountCents";
  @SerializedName(SERIALIZED_NAME_INVOICE_AMOUNT_CENTS)
  private BigDecimal invoiceAmountCents;

  public static final String SERIALIZED_NAME_INVOICE_DUE_DATE = "invoiceDueDate";
  @SerializedName(SERIALIZED_NAME_INVOICE_DUE_DATE)
  private String invoiceDueDate;

  public static final String SERIALIZED_NAME_INVOICE_ISSUED_DATE = "invoiceIssuedDate";
  @SerializedName(SERIALIZED_NAME_INVOICE_ISSUED_DATE)
  private String invoiceIssuedDate;

  public static final String SERIALIZED_NAME_PAYOR_EMAIL = "payorEmail";
  @SerializedName(SERIALIZED_NAME_PAYOR_EMAIL)
  private String payorEmail;

  public static final String SERIALIZED_NAME_PAYOR_ADDRESS = "payorAddress";
  @SerializedName(SERIALIZED_NAME_PAYOR_ADDRESS)
  private InvoicePayorAddress payorAddress;

  /**
   * &#x60;INDIVIDUAL&#x60; if the payor is a person and &#x60;BUSINESS&#x60; if the payor is a company.
   */
  @JsonAdapter(PayorTypeEnum.Adapter.class)
  public enum PayorTypeEnum {
    BUSINESS("BUSINESS"),
    
    INDIVIDUAL("INDIVIDUAL");

    private String value;

    PayorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayorTypeEnum fromValue(String value) {
      for (PayorTypeEnum b : PayorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PayorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYOR_TYPE = "payorType";
  @SerializedName(SERIALIZED_NAME_PAYOR_TYPE)
  private PayorTypeEnum payorType;

  public static final String SERIALIZED_NAME_PAYOR_BUSINESS_NAME = "payorBusinessName";
  @SerializedName(SERIALIZED_NAME_PAYOR_BUSINESS_NAME)
  private String payorBusinessName;

  public static final String SERIALIZED_NAME_PAYOR_FIRST_NAME = "payorFirstName";
  @SerializedName(SERIALIZED_NAME_PAYOR_FIRST_NAME)
  private String payorFirstName;

  public static final String SERIALIZED_NAME_PAYOR_MIDDLE_NAME = "payorMiddleName";
  @SerializedName(SERIALIZED_NAME_PAYOR_MIDDLE_NAME)
  private String payorMiddleName;

  public static final String SERIALIZED_NAME_PAYOR_LAST_NAME = "payorLastName";
  @SerializedName(SERIALIZED_NAME_PAYOR_LAST_NAME)
  private String payorLastName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private InvoiceStatus status;

  public static final String SERIALIZED_NAME_ISSUED_PRODUCT_ID = "issuedProductId";
  @SerializedName(SERIALIZED_NAME_ISSUED_PRODUCT_ID)
  private String issuedProductId;

  public static final String SERIALIZED_NAME_FEE_AMOUNT_CENTS = "feeAmountCents";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT_CENTS)
  private BigDecimal feeAmountCents;

  public static final String SERIALIZED_NAME_PRINCIPAL_AMOUNT_CENTS = "principalAmountCents";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_AMOUNT_CENTS)
  private BigDecimal principalAmountCents;

  public static final String SERIALIZED_NAME_INVOICE_ADVANCE_AMOUNT_CENTS = "invoiceAdvanceAmountCents";
  @SerializedName(SERIALIZED_NAME_INVOICE_ADVANCE_AMOUNT_CENTS)
  private BigDecimal invoiceAdvanceAmountCents;

  public static final String SERIALIZED_NAME_REPAYMENT_AMOUNT_CENTS = "repaymentAmountCents";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_AMOUNT_CENTS)
  private BigDecimal repaymentAmountCents;

  public static final String SERIALIZED_NAME_REPAYMENT_SCHEDULE = "repaymentSchedule";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_SCHEDULE)
  private InvoiceRepaymentSchedule repaymentSchedule;

  public static final String SERIALIZED_NAME_ADVANCE_RATE_PERCENTAGE = "advanceRatePercentage";
  @SerializedName(SERIALIZED_NAME_ADVANCE_RATE_PERCENTAGE)
  private BigDecimal advanceRatePercentage;

  public static final String SERIALIZED_NAME_TRANSACTION_FEE_PERCENTAGE = "transactionFeePercentage";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_FEE_PERCENTAGE)
  private BigDecimal transactionFeePercentage;

  public static final String SERIALIZED_NAME_AMOUNT_REQUESTED_FOR_FINANCING_CENTS = "amountRequestedForFinancingCents";
  @SerializedName(SERIALIZED_NAME_AMOUNT_REQUESTED_FOR_FINANCING_CENTS)
  private BigDecimal amountRequestedForFinancingCents;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public Invoice() {
  }

  public Invoice id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Kanmon’s unique ID for the invoice.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Invoice platformInvoiceId(String platformInvoiceId) {
    this.platformInvoiceId = platformInvoiceId;
    return this;
  }

   /**
   * Your platform’s unique ID for the invoice.
   * @return platformInvoiceId
  **/
  @javax.annotation.Nullable
  public String getPlatformInvoiceId() {
    return platformInvoiceId;
  }

  public void setPlatformInvoiceId(String platformInvoiceId) {
    this.platformInvoiceId = platformInvoiceId;
  }


  public Invoice platformInvoiceNumber(String platformInvoiceNumber) {
    this.platformInvoiceNumber = platformInvoiceNumber;
    return this;
  }

   /**
   * Your user-facing identifier for the invoice. This does not need to be unique. This may or may not be the same as your &#x60;platformInvoiceId&#x60;.
   * @return platformInvoiceNumber
  **/
  @javax.annotation.Nullable
  public String getPlatformInvoiceNumber() {
    return platformInvoiceNumber;
  }

  public void setPlatformInvoiceNumber(String platformInvoiceNumber) {
    this.platformInvoiceNumber = platformInvoiceNumber;
  }


  public Invoice invoiceAmountCents(BigDecimal invoiceAmountCents) {
    this.invoiceAmountCents = invoiceAmountCents;
    return this;
  }

   /**
   * The invoice amount - in cents.
   * @return invoiceAmountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getInvoiceAmountCents() {
    return invoiceAmountCents;
  }

  public void setInvoiceAmountCents(BigDecimal invoiceAmountCents) {
    this.invoiceAmountCents = invoiceAmountCents;
  }


  public Invoice invoiceDueDate(String invoiceDueDate) {
    this.invoiceDueDate = invoiceDueDate;
    return this;
  }

   /**
   * The date when the invoice will be paid by the payor. ISO 8601 date format.
   * @return invoiceDueDate
  **/
  @javax.annotation.Nullable
  public String getInvoiceDueDate() {
    return invoiceDueDate;
  }

  public void setInvoiceDueDate(String invoiceDueDate) {
    this.invoiceDueDate = invoiceDueDate;
  }


  public Invoice invoiceIssuedDate(String invoiceIssuedDate) {
    this.invoiceIssuedDate = invoiceIssuedDate;
    return this;
  }

   /**
   * The date when the payee issued the invoice. ISO 8601 date format.
   * @return invoiceIssuedDate
  **/
  @javax.annotation.Nullable
  public String getInvoiceIssuedDate() {
    return invoiceIssuedDate;
  }

  public void setInvoiceIssuedDate(String invoiceIssuedDate) {
    this.invoiceIssuedDate = invoiceIssuedDate;
  }


  public Invoice payorEmail(String payorEmail) {
    this.payorEmail = payorEmail;
    return this;
  }

   /**
   * The email of the payor.
   * @return payorEmail
  **/
  @javax.annotation.Nullable
  public String getPayorEmail() {
    return payorEmail;
  }

  public void setPayorEmail(String payorEmail) {
    this.payorEmail = payorEmail;
  }


  public Invoice payorAddress(InvoicePayorAddress payorAddress) {
    this.payorAddress = payorAddress;
    return this;
  }

   /**
   * Get payorAddress
   * @return payorAddress
  **/
  @javax.annotation.Nullable
  public InvoicePayorAddress getPayorAddress() {
    return payorAddress;
  }

  public void setPayorAddress(InvoicePayorAddress payorAddress) {
    this.payorAddress = payorAddress;
  }


  public Invoice payorType(PayorTypeEnum payorType) {
    this.payorType = payorType;
    return this;
  }

   /**
   * &#x60;INDIVIDUAL&#x60; if the payor is a person and &#x60;BUSINESS&#x60; if the payor is a company.
   * @return payorType
  **/
  @javax.annotation.Nullable
  public PayorTypeEnum getPayorType() {
    return payorType;
  }

  public void setPayorType(PayorTypeEnum payorType) {
    this.payorType = payorType;
  }


  public Invoice payorBusinessName(String payorBusinessName) {
    this.payorBusinessName = payorBusinessName;
    return this;
  }

   /**
   * The registered name of the payor business when the payor is a business and not an individual.
   * @return payorBusinessName
  **/
  @javax.annotation.Nullable
  public String getPayorBusinessName() {
    return payorBusinessName;
  }

  public void setPayorBusinessName(String payorBusinessName) {
    this.payorBusinessName = payorBusinessName;
  }


  public Invoice payorFirstName(String payorFirstName) {
    this.payorFirstName = payorFirstName;
    return this;
  }

   /**
   * The first name of the payor when the payor is an individual and not a business.
   * @return payorFirstName
  **/
  @javax.annotation.Nullable
  public String getPayorFirstName() {
    return payorFirstName;
  }

  public void setPayorFirstName(String payorFirstName) {
    this.payorFirstName = payorFirstName;
  }


  public Invoice payorMiddleName(String payorMiddleName) {
    this.payorMiddleName = payorMiddleName;
    return this;
  }

   /**
   * The middle name of the payor when the payor is an individual and not a business.
   * @return payorMiddleName
  **/
  @javax.annotation.Nullable
  public String getPayorMiddleName() {
    return payorMiddleName;
  }

  public void setPayorMiddleName(String payorMiddleName) {
    this.payorMiddleName = payorMiddleName;
  }


  public Invoice payorLastName(String payorLastName) {
    this.payorLastName = payorLastName;
    return this;
  }

   /**
   * The last name of the payor when the payor is an individual and not a business.
   * @return payorLastName
  **/
  @javax.annotation.Nullable
  public String getPayorLastName() {
    return payorLastName;
  }

  public void setPayorLastName(String payorLastName) {
    this.payorLastName = payorLastName;
  }


  public Invoice status(InvoiceStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public InvoiceStatus getStatus() {
    return status;
  }

  public void setStatus(InvoiceStatus status) {
    this.status = status;
  }


  public Invoice issuedProductId(String issuedProductId) {
    this.issuedProductId = issuedProductId;
    return this;
  }

   /**
   * The unique identifier for the issued product in Kanmon′s system.
   * @return issuedProductId
  **/
  @javax.annotation.Nonnull
  public String getIssuedProductId() {
    return issuedProductId;
  }

  public void setIssuedProductId(String issuedProductId) {
    this.issuedProductId = issuedProductId;
  }


  public Invoice feeAmountCents(BigDecimal feeAmountCents) {
    this.feeAmountCents = feeAmountCents;
    return this;
  }

   /**
   * The total fee amount - in cents.
   * @return feeAmountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getFeeAmountCents() {
    return feeAmountCents;
  }

  public void setFeeAmountCents(BigDecimal feeAmountCents) {
    this.feeAmountCents = feeAmountCents;
  }


  public Invoice principalAmountCents(BigDecimal principalAmountCents) {
    this.principalAmountCents = principalAmountCents;
    return this;
  }

   /**
   * The total principal amount - in cents.
   * @return principalAmountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getPrincipalAmountCents() {
    return principalAmountCents;
  }

  public void setPrincipalAmountCents(BigDecimal principalAmountCents) {
    this.principalAmountCents = principalAmountCents;
  }


  public Invoice invoiceAdvanceAmountCents(BigDecimal invoiceAdvanceAmountCents) {
    this.invoiceAdvanceAmountCents = invoiceAdvanceAmountCents;
    return this;
  }

   /**
   * The amount after fees the business will receive - in cents.
   * @return invoiceAdvanceAmountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getInvoiceAdvanceAmountCents() {
    return invoiceAdvanceAmountCents;
  }

  public void setInvoiceAdvanceAmountCents(BigDecimal invoiceAdvanceAmountCents) {
    this.invoiceAdvanceAmountCents = invoiceAdvanceAmountCents;
  }


  public Invoice repaymentAmountCents(BigDecimal repaymentAmountCents) {
    this.repaymentAmountCents = repaymentAmountCents;
    return this;
  }

   /**
   * The total amount that the business will repay - in cents.
   * @return repaymentAmountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getRepaymentAmountCents() {
    return repaymentAmountCents;
  }

  public void setRepaymentAmountCents(BigDecimal repaymentAmountCents) {
    this.repaymentAmountCents = repaymentAmountCents;
  }


  public Invoice repaymentSchedule(InvoiceRepaymentSchedule repaymentSchedule) {
    this.repaymentSchedule = repaymentSchedule;
    return this;
  }

   /**
   * The invoice repayment schedule.
   * @return repaymentSchedule
  **/
  @javax.annotation.Nonnull
  public InvoiceRepaymentSchedule getRepaymentSchedule() {
    return repaymentSchedule;
  }

  public void setRepaymentSchedule(InvoiceRepaymentSchedule repaymentSchedule) {
    this.repaymentSchedule = repaymentSchedule;
  }


  public Invoice advanceRatePercentage(BigDecimal advanceRatePercentage) {
    this.advanceRatePercentage = advanceRatePercentage;
    return this;
  }

   /**
   * The percentage of the invoice that is allowed for advances. E.g. a value of &#x60;80&#x60; would mean that $800 would be advanced on a $1,000 invoice.
   * @return advanceRatePercentage
  **/
  @javax.annotation.Nonnull
  public BigDecimal getAdvanceRatePercentage() {
    return advanceRatePercentage;
  }

  public void setAdvanceRatePercentage(BigDecimal advanceRatePercentage) {
    this.advanceRatePercentage = advanceRatePercentage;
  }


  public Invoice transactionFeePercentage(BigDecimal transactionFeePercentage) {
    this.transactionFeePercentage = transactionFeePercentage;
    return this;
  }

   /**
   * The percentage of the transaction that is charged as a fee. E.g. a value of &#x60;5&#x60; means 5%.
   * @return transactionFeePercentage
  **/
  @javax.annotation.Nonnull
  public BigDecimal getTransactionFeePercentage() {
    return transactionFeePercentage;
  }

  public void setTransactionFeePercentage(BigDecimal transactionFeePercentage) {
    this.transactionFeePercentage = transactionFeePercentage;
  }


  public Invoice amountRequestedForFinancingCents(BigDecimal amountRequestedForFinancingCents) {
    this.amountRequestedForFinancingCents = amountRequestedForFinancingCents;
    return this;
  }

   /**
   * The portion of the invoice amount that the business requests to be financed - in cents.
   * @return amountRequestedForFinancingCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getAmountRequestedForFinancingCents() {
    return amountRequestedForFinancingCents;
  }

  public void setAmountRequestedForFinancingCents(BigDecimal amountRequestedForFinancingCents) {
    this.amountRequestedForFinancingCents = amountRequestedForFinancingCents;
  }


  public Invoice createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation UTC ISO 8601 timestamp of the invoice.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Invoice updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Last updated UTC ISO 8601 timestamp of the invoice.
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invoice invoice = (Invoice) o;
    return Objects.equals(this.id, invoice.id) &&
        Objects.equals(this.platformInvoiceId, invoice.platformInvoiceId) &&
        Objects.equals(this.platformInvoiceNumber, invoice.platformInvoiceNumber) &&
        Objects.equals(this.invoiceAmountCents, invoice.invoiceAmountCents) &&
        Objects.equals(this.invoiceDueDate, invoice.invoiceDueDate) &&
        Objects.equals(this.invoiceIssuedDate, invoice.invoiceIssuedDate) &&
        Objects.equals(this.payorEmail, invoice.payorEmail) &&
        Objects.equals(this.payorAddress, invoice.payorAddress) &&
        Objects.equals(this.payorType, invoice.payorType) &&
        Objects.equals(this.payorBusinessName, invoice.payorBusinessName) &&
        Objects.equals(this.payorFirstName, invoice.payorFirstName) &&
        Objects.equals(this.payorMiddleName, invoice.payorMiddleName) &&
        Objects.equals(this.payorLastName, invoice.payorLastName) &&
        Objects.equals(this.status, invoice.status) &&
        Objects.equals(this.issuedProductId, invoice.issuedProductId) &&
        Objects.equals(this.feeAmountCents, invoice.feeAmountCents) &&
        Objects.equals(this.principalAmountCents, invoice.principalAmountCents) &&
        Objects.equals(this.invoiceAdvanceAmountCents, invoice.invoiceAdvanceAmountCents) &&
        Objects.equals(this.repaymentAmountCents, invoice.repaymentAmountCents) &&
        Objects.equals(this.repaymentSchedule, invoice.repaymentSchedule) &&
        Objects.equals(this.advanceRatePercentage, invoice.advanceRatePercentage) &&
        Objects.equals(this.transactionFeePercentage, invoice.transactionFeePercentage) &&
        Objects.equals(this.amountRequestedForFinancingCents, invoice.amountRequestedForFinancingCents) &&
        Objects.equals(this.createdAt, invoice.createdAt) &&
        Objects.equals(this.updatedAt, invoice.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, platformInvoiceId, platformInvoiceNumber, invoiceAmountCents, invoiceDueDate, invoiceIssuedDate, payorEmail, payorAddress, payorType, payorBusinessName, payorFirstName, payorMiddleName, payorLastName, status, issuedProductId, feeAmountCents, principalAmountCents, invoiceAdvanceAmountCents, repaymentAmountCents, repaymentSchedule, advanceRatePercentage, transactionFeePercentage, amountRequestedForFinancingCents, createdAt, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invoice {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    platformInvoiceId: ").append(toIndentedString(platformInvoiceId)).append("\n");
    sb.append("    platformInvoiceNumber: ").append(toIndentedString(platformInvoiceNumber)).append("\n");
    sb.append("    invoiceAmountCents: ").append(toIndentedString(invoiceAmountCents)).append("\n");
    sb.append("    invoiceDueDate: ").append(toIndentedString(invoiceDueDate)).append("\n");
    sb.append("    invoiceIssuedDate: ").append(toIndentedString(invoiceIssuedDate)).append("\n");
    sb.append("    payorEmail: ").append(toIndentedString(payorEmail)).append("\n");
    sb.append("    payorAddress: ").append(toIndentedString(payorAddress)).append("\n");
    sb.append("    payorType: ").append(toIndentedString(payorType)).append("\n");
    sb.append("    payorBusinessName: ").append(toIndentedString(payorBusinessName)).append("\n");
    sb.append("    payorFirstName: ").append(toIndentedString(payorFirstName)).append("\n");
    sb.append("    payorMiddleName: ").append(toIndentedString(payorMiddleName)).append("\n");
    sb.append("    payorLastName: ").append(toIndentedString(payorLastName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    issuedProductId: ").append(toIndentedString(issuedProductId)).append("\n");
    sb.append("    feeAmountCents: ").append(toIndentedString(feeAmountCents)).append("\n");
    sb.append("    principalAmountCents: ").append(toIndentedString(principalAmountCents)).append("\n");
    sb.append("    invoiceAdvanceAmountCents: ").append(toIndentedString(invoiceAdvanceAmountCents)).append("\n");
    sb.append("    repaymentAmountCents: ").append(toIndentedString(repaymentAmountCents)).append("\n");
    sb.append("    repaymentSchedule: ").append(toIndentedString(repaymentSchedule)).append("\n");
    sb.append("    advanceRatePercentage: ").append(toIndentedString(advanceRatePercentage)).append("\n");
    sb.append("    transactionFeePercentage: ").append(toIndentedString(transactionFeePercentage)).append("\n");
    sb.append("    amountRequestedForFinancingCents: ").append(toIndentedString(amountRequestedForFinancingCents)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("platformInvoiceId");
    openapiFields.add("platformInvoiceNumber");
    openapiFields.add("invoiceAmountCents");
    openapiFields.add("invoiceDueDate");
    openapiFields.add("invoiceIssuedDate");
    openapiFields.add("payorEmail");
    openapiFields.add("payorAddress");
    openapiFields.add("payorType");
    openapiFields.add("payorBusinessName");
    openapiFields.add("payorFirstName");
    openapiFields.add("payorMiddleName");
    openapiFields.add("payorLastName");
    openapiFields.add("status");
    openapiFields.add("issuedProductId");
    openapiFields.add("feeAmountCents");
    openapiFields.add("principalAmountCents");
    openapiFields.add("invoiceAdvanceAmountCents");
    openapiFields.add("repaymentAmountCents");
    openapiFields.add("repaymentSchedule");
    openapiFields.add("advanceRatePercentage");
    openapiFields.add("transactionFeePercentage");
    openapiFields.add("amountRequestedForFinancingCents");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("platformInvoiceId");
    openapiRequiredFields.add("platformInvoiceNumber");
    openapiRequiredFields.add("invoiceAmountCents");
    openapiRequiredFields.add("invoiceDueDate");
    openapiRequiredFields.add("invoiceIssuedDate");
    openapiRequiredFields.add("payorEmail");
    openapiRequiredFields.add("payorBusinessName");
    openapiRequiredFields.add("payorFirstName");
    openapiRequiredFields.add("payorMiddleName");
    openapiRequiredFields.add("payorLastName");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("issuedProductId");
    openapiRequiredFields.add("feeAmountCents");
    openapiRequiredFields.add("principalAmountCents");
    openapiRequiredFields.add("invoiceAdvanceAmountCents");
    openapiRequiredFields.add("repaymentAmountCents");
    openapiRequiredFields.add("repaymentSchedule");
    openapiRequiredFields.add("advanceRatePercentage");
    openapiRequiredFields.add("transactionFeePercentage");
    openapiRequiredFields.add("amountRequestedForFinancingCents");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Invoice
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Invoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Invoice is not found in the empty JSON string", Invoice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Invoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Invoice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Invoice.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("platformInvoiceId") != null && !jsonObj.get("platformInvoiceId").isJsonNull()) && !jsonObj.get("platformInvoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformInvoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformInvoiceId").toString()));
      }
      if ((jsonObj.get("platformInvoiceNumber") != null && !jsonObj.get("platformInvoiceNumber").isJsonNull()) && !jsonObj.get("platformInvoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformInvoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformInvoiceNumber").toString()));
      }
      if ((jsonObj.get("invoiceDueDate") != null && !jsonObj.get("invoiceDueDate").isJsonNull()) && !jsonObj.get("invoiceDueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceDueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceDueDate").toString()));
      }
      if ((jsonObj.get("invoiceIssuedDate") != null && !jsonObj.get("invoiceIssuedDate").isJsonNull()) && !jsonObj.get("invoiceIssuedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceIssuedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceIssuedDate").toString()));
      }
      if ((jsonObj.get("payorEmail") != null && !jsonObj.get("payorEmail").isJsonNull()) && !jsonObj.get("payorEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorEmail").toString()));
      }
      // validate the optional field `payorAddress`
      if (jsonObj.get("payorAddress") != null && !jsonObj.get("payorAddress").isJsonNull()) {
        InvoicePayorAddress.validateJsonElement(jsonObj.get("payorAddress"));
      }
      if ((jsonObj.get("payorType") != null && !jsonObj.get("payorType").isJsonNull()) && !jsonObj.get("payorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorType").toString()));
      }
      // validate the optional field `payorType`
      if (jsonObj.get("payorType") != null && !jsonObj.get("payorType").isJsonNull()) {
        PayorTypeEnum.validateJsonElement(jsonObj.get("payorType"));
      }
      if ((jsonObj.get("payorBusinessName") != null && !jsonObj.get("payorBusinessName").isJsonNull()) && !jsonObj.get("payorBusinessName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorBusinessName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorBusinessName").toString()));
      }
      if ((jsonObj.get("payorFirstName") != null && !jsonObj.get("payorFirstName").isJsonNull()) && !jsonObj.get("payorFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorFirstName").toString()));
      }
      if ((jsonObj.get("payorMiddleName") != null && !jsonObj.get("payorMiddleName").isJsonNull()) && !jsonObj.get("payorMiddleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorMiddleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorMiddleName").toString()));
      }
      if ((jsonObj.get("payorLastName") != null && !jsonObj.get("payorLastName").isJsonNull()) && !jsonObj.get("payorLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payorLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payorLastName").toString()));
      }
      // validate the required field `status`
      InvoiceStatus.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("issuedProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuedProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuedProductId").toString()));
      }
      // validate the required field `repaymentSchedule`
      InvoiceRepaymentSchedule.validateJsonElement(jsonObj.get("repaymentSchedule"));
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Invoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Invoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Invoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Invoice.class));

       return (TypeAdapter<T>) new TypeAdapter<Invoice>() {
           @Override
           public void write(JsonWriter out, Invoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Invoice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Invoice given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Invoice
  * @throws IOException if the JSON string is invalid with respect to Invoice
  */
  public static Invoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Invoice.class);
  }

 /**
  * Convert an instance of Invoice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

