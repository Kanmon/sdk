/*
 * Kanmon Public V2 API
 * Kanmon's public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kanmon.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kanmon.client.model.PaymentScheduleItemPaymentOrder;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.kanmon.client.JSON;

/**
 * PaymentScheduleItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-02T16:25:47.631908-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class PaymentScheduleItem {
  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private String effectiveDate;

  public static final String SERIALIZED_NAME_TOTAL_PAYMENT_AMOUNT_CENTS = "totalPaymentAmountCents";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAYMENT_AMOUNT_CENTS)
  private BigDecimal totalPaymentAmountCents;

  public static final String SERIALIZED_NAME_PAYMENT_ORDER = "paymentOrder";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ORDER)
  private PaymentScheduleItemPaymentOrder paymentOrder;

  public PaymentScheduleItem() {
  }

  public PaymentScheduleItem effectiveDate(String effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * The effective UTC ISO 8601 date that the payment will process.
   * @return effectiveDate
  **/
  @javax.annotation.Nonnull
  public String getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(String effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public PaymentScheduleItem totalPaymentAmountCents(BigDecimal totalPaymentAmountCents) {
    this.totalPaymentAmountCents = totalPaymentAmountCents;
    return this;
  }

   /**
   * The total payment amount - in cents.
   * @return totalPaymentAmountCents
  **/
  @javax.annotation.Nonnull
  public BigDecimal getTotalPaymentAmountCents() {
    return totalPaymentAmountCents;
  }

  public void setTotalPaymentAmountCents(BigDecimal totalPaymentAmountCents) {
    this.totalPaymentAmountCents = totalPaymentAmountCents;
  }


  public PaymentScheduleItem paymentOrder(PaymentScheduleItemPaymentOrder paymentOrder) {
    this.paymentOrder = paymentOrder;
    return this;
  }

   /**
   * Get paymentOrder
   * @return paymentOrder
  **/
  @javax.annotation.Nullable
  public PaymentScheduleItemPaymentOrder getPaymentOrder() {
    return paymentOrder;
  }

  public void setPaymentOrder(PaymentScheduleItemPaymentOrder paymentOrder) {
    this.paymentOrder = paymentOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentScheduleItem paymentScheduleItem = (PaymentScheduleItem) o;
    return Objects.equals(this.effectiveDate, paymentScheduleItem.effectiveDate) &&
        Objects.equals(this.totalPaymentAmountCents, paymentScheduleItem.totalPaymentAmountCents) &&
        Objects.equals(this.paymentOrder, paymentScheduleItem.paymentOrder);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveDate, totalPaymentAmountCents, paymentOrder);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentScheduleItem {\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    totalPaymentAmountCents: ").append(toIndentedString(totalPaymentAmountCents)).append("\n");
    sb.append("    paymentOrder: ").append(toIndentedString(paymentOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveDate");
    openapiFields.add("totalPaymentAmountCents");
    openapiFields.add("paymentOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effectiveDate");
    openapiRequiredFields.add("totalPaymentAmountCents");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaymentScheduleItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentScheduleItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentScheduleItem is not found in the empty JSON string", PaymentScheduleItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentScheduleItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentScheduleItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentScheduleItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("effectiveDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveDate").toString()));
      }
      // validate the optional field `paymentOrder`
      if (jsonObj.get("paymentOrder") != null && !jsonObj.get("paymentOrder").isJsonNull()) {
        PaymentScheduleItemPaymentOrder.validateJsonElement(jsonObj.get("paymentOrder"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentScheduleItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentScheduleItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentScheduleItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentScheduleItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentScheduleItem>() {
           @Override
           public void write(JsonWriter out, PaymentScheduleItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentScheduleItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentScheduleItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentScheduleItem
  * @throws IOException if the JSON string is invalid with respect to PaymentScheduleItem
  */
  public static PaymentScheduleItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentScheduleItem.class);
  }

 /**
  * Convert an instance of PaymentScheduleItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

