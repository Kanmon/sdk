/*
 * Kanmon Public V2 API
 * Kanmon's public api. Contains all of the endpoints for both capital providers and platforms
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kanmon.client.api;

import com.kanmon.client.ApiException;
import com.kanmon.client.model.BadRequestException;
import java.math.BigDecimal;
import com.kanmon.client.model.BusinessNotFoundException;
import com.kanmon.client.model.CreateUser409Response;
import com.kanmon.client.model.CreateUserRequestBody;
import com.kanmon.client.model.ForbiddenException;
import com.kanmon.client.model.GetUsersResponse;
import com.kanmon.client.model.InternalServerErrorException;
import com.kanmon.client.model.MergeUsersRequestBody;
import com.kanmon.client.model.MergeUsersResponseBody;
import com.kanmon.client.model.PrimaryBusinessOwnerAlreadyExistsForBusinessException;
import com.kanmon.client.model.UpdateUser409Response;
import com.kanmon.client.model.UpdateUserRequestBody;
import com.kanmon.client.model.User;
import com.kanmon.client.model.UserNotFoundException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Create a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        CreateUserRequestBody createUserRequestBody = null;
        User response = api.createUser(createUserRequestBody);
        // TODO: test validations
    }

    /**
     * Fetch a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String id = null;
        String idType = null;
        User response = api.getUser(id, idType);
        // TODO: test validations
    }

    /**
     * Fetch users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String ids = null;
        String platformUserIds = null;
        String platformBusinessIds = null;
        String businessIds = null;
        BigDecimal offset = null;
        BigDecimal limit = null;
        String createdAtStart = null;
        String createdAtEnd = null;
        GetUsersResponse response = api.getUsers(ids, platformUserIds, platformBusinessIds, businessIds, offset, limit, createdAtStart, createdAtEnd);
        // TODO: test validations
    }

    /**
     * Merge users from a source business into a target business
     *
     * Users from the source business will be moved into the target business. This will only work if the source business has not started onboarding yet. After the merge, the source business will be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeUserIntoBusinessTest() throws ApiException {
        MergeUsersRequestBody mergeUsersRequestBody = null;
        MergeUsersResponseBody response = api.mergeUserIntoBusiness(mergeUsersRequestBody);
        // TODO: test validations
    }

    /**
     * Update a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String id = null;
        UpdateUserRequestBody updateUserRequestBody = null;
        String idType = null;
        User response = api.updateUser(id, updateUserRequestBody, idType);
        // TODO: test validations
    }

}
