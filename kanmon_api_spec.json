{
  "openapi": "3.0.0",
  "paths": {
    "/api/platform/v2/prequalifications": {
      "get": {
        "operationId": "getAllPrequalifiedBusinesses",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.prequalifications.getAllPrequalifiedBusinesses({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch business prequalifications",
        "parameters": [
          {
            "name": "platformBusinessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique IDs for businesses.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of records to skip when performing pagination. Defaults to `0`.",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to limit when performing pagination. Defaults to `100`, which is the max.",
            "example": "100",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdAtStart",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is greater than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is less than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPrequalificationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Prequalifications"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/businesses": {
      "post": {
        "operationId": "createBusiness",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.businesses.createBusiness({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Create a business",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Business created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Business"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "BusinessNotFoundException, CustomInitializationNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BusinessNotFoundException"
                    },
                    {
                      "$ref": "#/components/schemas/CustomInitializationNotFoundException"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "BusinessAlreadyExistsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessAlreadyExistsException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Businesses"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "get": {
        "operationId": "getAllBusinesses",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.businesses.getAllBusinesses({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch businesses",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for businesses.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformBusinessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique IDs for businesses.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of records to skip when performing pagination. Defaults to `0`.",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to limit when performing pagination. Defaults to `100`, which is the max.",
            "example": "100",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdAtStart",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is greater than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is less than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBusinessesResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Businesses"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/businesses/{id}": {
      "patch": {
        "operationId": "updateBusiness",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.businesses.updateBusiness({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Update a business",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Either the Kanmon business UUID or your platform’s business ID, depending on `idType`.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {}
          },
          {
            "name": "idType",
            "required": false,
            "in": "query",
            "description": "Which ID type to query the business by. Defaults to `KANMON`. Use `PLATFORM` if you want to query by your platform’s ID.",
            "example": "KANMON",
            "schema": {
              "enum": [
                "KANMON",
                "PLATFORM"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Business"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "BusinessNotFoundException, CustomInitializationNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BusinessNotFoundException"
                    },
                    {
                      "$ref": "#/components/schemas/CustomInitializationNotFoundException"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "BusinessAlreadyExistsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessAlreadyExistsException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Businesses"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "get": {
        "operationId": "getBusiness",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.businesses.getBusiness({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch a business",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Either the Kanmon business UUID or your platform’s business ID, depending on `idType`.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {}
          },
          {
            "name": "idType",
            "required": false,
            "in": "query",
            "description": "Which ID type to query the business by. Defaults to `KANMON`. Use `PLATFORM` if you want to query by your platform’s ID.",
            "example": "KANMON",
            "schema": {
              "enum": [
                "KANMON",
                "PLATFORM"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Business"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "BusinessNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessNotFoundException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Businesses"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/businesses/{id}/activity-logs": {
      "get": {
        "operationId": "getBusinessActivityLog",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.businesses.getBusinessActivityLog({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch activity logs for a business",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Either the Kanmon business UUID or your platform’s business ID, depending on `idType`.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {}
          },
          {
            "name": "idType",
            "required": false,
            "in": "query",
            "description": "Which ID type to query the business by. Defaults to `KANMON`. Use `PLATFORM` if you want to query by your platform’s ID.",
            "example": "KANMON",
            "schema": {
              "enum": [
                "KANMON",
                "PLATFORM"
              ],
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of records to skip when performing pagination. Defaults to `0`.",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to limit when performing pagination. Defaults to `100`, which is the max.",
            "example": "100",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdAtStart",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is greater than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is less than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActivityLogsResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "BusinessNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessNotFoundException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Businesses"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/users": {
      "post": {
        "operationId": "createUser",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.users.createUser({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Create a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "BusinessNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessNotFoundException"
                }
              }
            }
          },
          "409": {
            "description": "PrimaryBusinessOwnerAlreadyExistsForBusinessException, UserAlreadyExistsWithPlatformUserIdException, UserAlreadyExistsWithEmailException",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PrimaryBusinessOwnerAlreadyExistsForBusinessException"
                    },
                    {
                      "$ref": "#/components/schemas/UserAlreadyExistsWithPlatformUserIdException"
                    },
                    {
                      "$ref": "#/components/schemas/UserAlreadyExistsWithEmailException"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "get": {
        "operationId": "getAllUsers",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.users.getAllUsers({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch users",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for users.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformUserIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique IDs for users.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformBusinessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique business IDs for users.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your Kanmon’s unique business IDs for users.",
            "example": "e571dfdc-e6d5-42f3-ae13-892ffd893e7d,fd424965-a4b3-44e9-91f5-1152ee02a670",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of records to skip when performing pagination. Defaults to `0`.",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to limit when performing pagination. Defaults to `100`, which is the max.",
            "example": "100",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdAtStart",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is greater than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is less than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/users/{id}": {
      "get": {
        "operationId": "getUser",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.users.getUser({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch a user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Either the Kanmon user UUID or your platform’s user ID, depending on `idType`.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "required": false,
            "in": "query",
            "description": "Which ID type to query the user by. Defaults to `KANMON`. Use `PLATFORM` if you want to query by your platform’s ID.",
            "example": "KANMON",
            "schema": {
              "enum": [
                "KANMON",
                "PLATFORM"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "UserNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "patch": {
        "operationId": "updateUser",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.users.updateUser({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Update a user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Either the Kanmon user UUID or your platform’s user ID, depending on `idType`.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "required": false,
            "in": "query",
            "description": "Which ID type to query the user by. Defaults to `KANMON`. Use `PLATFORM` if you want to query by your platform’s ID.",
            "example": "KANMON",
            "schema": {
              "enum": [
                "KANMON",
                "PLATFORM"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "UserNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundException"
                }
              }
            }
          },
          "409": {
            "description": "UserAlreadyExistsWithEmailException, PrimaryBusinessOwnerAlreadyExistsForBusinessException",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UserAlreadyExistsWithEmailException"
                    },
                    {
                      "$ref": "#/components/schemas/PrimaryBusinessOwnerAlreadyExistsForBusinessException"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/users/merge": {
      "post": {
        "operationId": "mergeUserIntoBusiness",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.users.mergeUserIntoBusiness({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Merge users from a source business into a target business",
        "description": "Users from the source business will be moved into the target business. This will only work if the source business has not started onboarding yet. After the merge, the source business will be deleted.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeUsersRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeUsersResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "BusinessNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessNotFoundException"
                }
              }
            }
          },
          "409": {
            "description": "PrimaryBusinessOwnerAlreadyExistsForBusinessException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimaryBusinessOwnerAlreadyExistsForBusinessException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/connect-tokens": {
      "post": {
        "operationId": "createConnectToken",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.connectTokens.createConnectToken({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Create a connect token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConnectTokenRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Connect token created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectToken"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "UserNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Connect Tokens"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/invoices/{id}": {
      "get": {
        "operationId": "getInvoice",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.invoices.getInvoice({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch an invoice",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Either the Kanmon invoice UUID or your platform’s invoice ID, depending on `idType`.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "required": false,
            "in": "query",
            "description": "Which ID type to query the invoice by. Defaults to `KANMON`. Use `PLATFORM` if you want to query by your platform’s ID.",
            "example": "KANMON",
            "schema": {
              "enum": [
                "KANMON",
                "PLATFORM"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "InvoiceNotFoundException, BusinessNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InvoiceNotFoundException"
                    },
                    {
                      "$ref": "#/components/schemas/BusinessNotFoundException"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/invoices": {
      "get": {
        "operationId": "getAllInvoices",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.invoices.getAllInvoices({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch invoices",
        "parameters": [
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of invoice statuses.",
            "example": "INVOICE_CREATED,INVOICE_FUNDED",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for invoices.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformBusinessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique IDs for businesses.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for businesses.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformInvoiceIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platforms’s unique IDs for invoices.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of records to skip when performing pagination. Defaults to `0`.",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to limit when performing pagination. Defaults to `100`, which is the max.",
            "example": "100",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdAtStart",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is greater than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is less than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInvoicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Invoices"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/offers/{id}": {
      "get": {
        "operationId": "getOfferById",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.offers.getOfferById({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch an offer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The Kanmon offer UUID.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "OfferNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferNotFoundException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/offers": {
      "get": {
        "operationId": "getAllOffers",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.offers.getAllOffers({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch offers",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for offers.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformBusinessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique IDs for businesses.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for businesses.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of records to skip when performing pagination. Defaults to `0`.",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to limit when performing pagination. Defaults to `100`, which is the max.",
            "example": "100",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdAtStart",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is greater than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is less than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOffersResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/issued-products/{id}": {
      "get": {
        "operationId": "getIssuedProductById",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.issuedProducts.getIssuedProductById({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch an issued product",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The Kanmon issued product UUID.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedProduct"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "IssuedProductNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedProductNotFoundException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Issued Products"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/issued-products": {
      "get": {
        "operationId": "getAllIssuedProducts",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.issuedProducts.getAllIssuedProducts({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch issued products",
        "parameters": [
          {
            "name": "offerIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for offers.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for issued products.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformBusinessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique IDs for businesses.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for businesses.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of records to skip when performing pagination. Defaults to `0`.",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to limit when performing pagination. Defaults to `100`, which is the max.",
            "example": "100",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdAtStart",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is greater than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is less than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIssuedProductsResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Issued Products"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/bank-accounts": {
      "post": {
        "operationId": "createBusinessBankAccount",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.bankAccounts.createBusinessBankAccount({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Create a business bank account",
        "description": "We only support creating disbursement checking accounts at the moment. Each business can only have one disbursement checking account.\n      Please contact Kanmon to enable access to bank account APIs.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessBankAccountRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessBankAccount"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "BusinessNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessNotFoundException"
                }
              }
            }
          },
          "409": {
            "description": "BankAccountAlreadyExistException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountAlreadyExistException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Bank Accounts"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "get": {
        "operationId": "getAllBusinessBankAccounts",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.bankAccounts.getAllBusinessBankAccounts({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch business bank accounts",
        "description": "Please contact Kanmon to enable access to bank account APIs.",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for bank accounts.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformBankAccountIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique IDs for bank accounts.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformBusinessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique business IDs for bannk accounts.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your Kanmon’s unique business IDs for bannk accounts.",
            "example": "29bc2693-ca4b-4d07-b7cf-dc509acd50ab,863ec540-c246-4698-8ea3-a05582883f2c",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of records to skip when performing pagination. Defaults to `0`.",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to limit when performing pagination. Defaults to `100`, which is the max.",
            "example": "100",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdAtStart",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is greater than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is less than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBusinessBankAccountsResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Bank Accounts"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/bank-accounts/{id}": {
      "get": {
        "operationId": "getBusinessBankAccount",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.bankAccounts.getBusinessBankAccount({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch a business bank account",
        "description": "Please contact Kanmon to enable access to bank account APIs.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Either the Kanmon bank account UUID or your platform’s bank account ID, depending on `idType`.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "required": false,
            "in": "query",
            "description": "Which ID type to query the bank account by. Defaults to `KANMON`. Use `PLATFORM` if you want to query by your platform’s ID.",
            "example": "KANMON",
            "schema": {
              "enum": [
                "KANMON",
                "PLATFORM"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessBankAccount"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "BankAccountNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountNotFoundException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Bank Accounts"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "patch": {
        "operationId": "updateBusinessBankAccount",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.bankAccounts.updateBusinessBankAccount({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Update a business bank account",
        "description": "We only support creating disbursement checking accounts at the moment. Each business can only have one disbursement checking account.\n        Please contact Kanmon to enable access to bank account APIs.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Either the Kanmon bank account UUID or your platform’s bank account ID, depending on `idType`.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idType",
            "required": false,
            "in": "query",
            "description": "Which ID type to query the bank account by. Defaults to `KANMON`. Use `PLATFORM` if you want to query by your platform’s ID.",
            "example": "KANMON",
            "schema": {
              "enum": [
                "KANMON",
                "PLATFORM"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessAccountRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessBankAccount"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "BankAccountNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountNotFoundException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Bank Accounts"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/payments/{id}": {
      "get": {
        "operationId": "getPaymentById",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.payments.getPaymentById({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch a payment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The Kanmon payment order UUID.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOrder"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "PaymentOrderNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOrderNotFoundException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/issued-products/{id}/payment-schedule": {
      "get": {
        "operationId": "getPaymentScheduleForAIssuedProduct",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.payments.getPaymentScheduleForAIssuedProduct({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch payment schedule for an issued product",
        "parameters": [
          {
            "name": "drawRequestIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique draw request IDs.",
            "example": "cee11812-ac88-4dc5-a7b2-08656f25bb74,11620f14-f637-41b6-9e03-670deaeac78b",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for invoices.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformInvoiceIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique IDs for invoices.",
            "example": "12322,12331",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direction",
            "required": false,
            "in": "query",
            "description": "The direction of the payment.",
            "example": "REPAYMENT",
            "schema": {
              "enum": [
                "DISBURSEMENT",
                "REPAYMENT"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "The status of the payment.",
            "example": "PAID",
            "schema": {
              "$ref": "#/components/schemas/PaymentOrderStatus"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The Kanmon issued product UUID.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of records to skip when performing pagination. Defaults to `0`.",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to limit when performing pagination. Defaults to `100`, which is the max.",
            "example": "100",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "IssuedProductNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedProductNotFoundException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/draw-requests/{id}": {
      "get": {
        "operationId": "getDrawRequest",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.drawRequests.getDrawRequest({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch a draw request",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The Kanmon draw request UUID.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawRequest"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawRequestNotFoundException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Draw Requests"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/draw-requests": {
      "get": {
        "operationId": "getAllDrawRequests",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.drawRequests.getAllDrawRequests({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch draw requests",
        "parameters": [
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of draw request statuses.",
            "example": "DRAW_REQUEST_FUNDED,DRAW_REQUEST_PAID_IN_FULL",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for invoices.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platformBusinessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique IDs for businesses.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for businesses.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of records to skip when performing pagination. Defaults to `0`.",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to limit when performing pagination. Defaults to `100`, which is the max.",
            "example": "100",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdAtStart",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is greater than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is less than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDrawRequestsResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Draw Requests"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/documents": {
      "post": {
        "operationId": "createBusinessDocument",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.documents.createBusinessDocument({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Upload documents for a business",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadBankDocumentsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBusinessDocumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Documents"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/integrated-mca-receivables": {
      "get": {
        "operationId": "getAllIntegratedMcaReceivables",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.integratedMcaReceivable.getAllIntegratedMcaReceivables({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Fetch integrated MCA receivables",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon’s unique IDs for integrated MCA receivable.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issuedProductIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of Kanmon unique IDs for issued product.",
            "example": "60eaa08c-f7a5-4f3a-860d-a16dde5771d6,70eaa08c-f7a5-4f3a-860d-a16dde5771e34",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionIds",
            "required": false,
            "in": "query",
            "description": "A comma delimited list of your platform’s unique IDs for transaction.",
            "example": "12345,67890",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of records to skip when performing pagination. Defaults to `0`.",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to limit when performing pagination. Defaults to `100`, which is the max.",
            "example": "100",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "createdAtStart",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is greater than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter for records where `createdAt` is less than or equal to this value. ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIntegratedMcaReceivablesResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Integrated MCA Receivables"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "post": {
        "operationId": "createIntegratedMcaReceivable",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.integratedMcaReceivable.createIntegratedMcaReceivable({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Create an integrated MCA receivable",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntegratedMcaReceivableBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratedMcaReceivable"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException, NoRemainingBalanceException, IncorrectRepaymentAmountException",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestException"
                    },
                    {
                      "$ref": "#/components/schemas/NoRemainingBalanceException"
                    },
                    {
                      "$ref": "#/components/schemas/IncorrectRepaymentAmountException"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "IssuedProductNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedProductNotFoundException"
                }
              }
            }
          },
          "409": {
            "description": "IncorrectProductTypeException, IntegratedMcaReceivableAlreadyExistsException",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/IncorrectProductTypeException"
                    },
                    {
                      "$ref": "#/components/schemas/IntegratedMcaReceivableAlreadyExistsException"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Integrated MCA Receivables"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/platform/v2/embedded-session": {
      "post": {
        "operationId": "createEmbeddedSession",
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "install": "npm install @kanmon/sdk",
              "name": "SDK",
              "code": "\nkanmonApi.embeddedSessions.createEmbeddedSession({\n  ...params...\n})\n    "
            }
          ]
        },
        "summary": "Create an embedded session",
        "description": "Embedded session tokens allow you to securely pass data to Kanmon. First, you will need to call this API to create a token. Then, you will use the token when launching the embedded application.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionTokenRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Embedded session created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddedSession"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "404": {
            "description": "BusinessNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessNotFoundException"
                }
              }
            }
          },
          "409": {
            "description": "BusinessHasNoInvoiceFinancingProductException, PlatformInvoiceIdAlreadyExistsForAnotherIssuedProductException",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PlatformInvoiceIdAlreadyExistsForAnotherIssuedProductException"
                    },
                    {
                      "$ref": "#/components/schemas/BusinessHasNoInvoiceFinancingProductException"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          }
        },
        "tags": [
          "Embedded Sessions"
        ],
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Kanmon Public V2 API",
    "description": "Kanmon's public api. Contains all of the endpoints for both capital providers and platforms",
    "version": "2.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://api.kanmon.com",
      "description": "Production"
    },
    {
      "url": "https://api.kanmon.dev",
      "description": "Sandbox"
    },
    {
      "url": "http://localhost:3333",
      "description": "Local"
    },
    {
      "url": "https://workflow.concar.dev",
      "description": "Staging"
    }
  ],
  "components": {
    "securitySchemes": {
      "Authorization": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "schemas": {
      "BusinessPrequalification": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string",
            "description": "The product that the business is prequalified for. This will be null if `isPrequalified` is false. Values can be `INVOICE_FINANCING`, `TERM_LOAN`, `MCA`, `LINE_OF_CREDIT`, `INTEGRATED_MCA`.",
            "example": "TERM_LOAN",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ],
            "nullable": true
          },
          "platformId": {
            "type": "string",
            "description": "The UUID representing your platform in Kanmon.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "businessId": {
            "type": "string",
            "description": "The UUID representing the business in Kanmon.",
            "nullable": true,
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "platformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique ID for the business.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "isPrequalified": {
            "type": "boolean",
            "description": "Whether or not the business has been prequalified."
          },
          "prequalifiedAmountCents": {
            "type": "number",
            "description": "Number describing the prequalification amount of the business in cents.",
            "nullable": true,
            "example": 1000000
          },
          "createdAt": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the prequalification.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated UTC ISO 8601 timestamp of the prequalification.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "product",
          "platformId",
          "businessId",
          "platformBusinessId",
          "isPrequalified",
          "prequalifiedAmountCents",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaginationResult": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "description": "The number of records to limit when performing pagination.",
            "example": "100"
          },
          "offset": {
            "type": "number",
            "description": "The number of records to skip when performing pagination.",
            "example": "0"
          },
          "totalCount": {
            "type": "number",
            "description": "The total number of records that matched the query.",
            "example": "100"
          }
        },
        "required": [
          "limit",
          "offset",
          "totalCount"
        ]
      },
      "GetPrequalificationsResponse": {
        "type": "object",
        "properties": {
          "prequalifications": {
            "description": "Array of prequalifications.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessPrequalification"
            }
          },
          "pagination": {
            "description": "Pagination metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResult"
              }
            ]
          }
        },
        "required": [
          "prequalifications",
          "pagination"
        ]
      },
      "BadRequestException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "BadRequestException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Bad Request"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "ForbiddenException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "ForbiddenException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Forbidden"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "InternalServerErrorException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "InternalServerErrorException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "addressLineOne": {
            "type": "string"
          },
          "addressLineTwo": {
            "type": "string",
            "example": "Apt 123",
            "nullable": true
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "description": "The 2 character abbreviated state",
            "example": "CA",
            "enum": [
              "AL",
              "KY",
              "OH",
              "AK",
              "LA",
              "OK",
              "AZ",
              "ME",
              "OR",
              "AR",
              "MD",
              "PA",
              "AS",
              "MA",
              "PR",
              "CA",
              "MI",
              "RI",
              "CO",
              "MN",
              "SC",
              "CT",
              "MS",
              "SD",
              "DE",
              "MO",
              "TN",
              "DC",
              "MT",
              "TX",
              "FL",
              "NE",
              "TT",
              "GA",
              "NV",
              "UT",
              "GU",
              "NH",
              "VT",
              "HI",
              "NJ",
              "VA",
              "ID",
              "NM",
              "VI",
              "IL",
              "NY",
              "WA",
              "IN",
              "NC",
              "WV",
              "IA",
              "ND",
              "WI",
              "KS",
              "MP",
              "WY"
            ]
          },
          "zipcode": {
            "type": "string",
            "description": "Zip code can be 5 digits, 9 digits, or 5+4 including a hyphen or plus sign, e.g. 90210, 902101234, 90210-1234 or 90210+1234",
            "example": "94401"
          },
          "country": {
            "type": "string",
            "description": "USA",
            "example": "USA"
          }
        },
        "required": [
          "addressLineOne",
          "city",
          "state",
          "zipcode",
          "country"
        ]
      },
      "CreateBusinessRequestBody": {
        "type": "object",
        "properties": {
          "platformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique ID for the business.",
            "example": "12345"
          },
          "name": {
            "type": "string",
            "description": "The business’s name.",
            "example": "My Business"
          },
          "address": {
            "description": "The business’s address. The address is optional. If you provide the address, you need to provide all the required fields in the address.",
            "example": {
              "city": "San Mateo",
              "state": "CA",
              "country": "USA",
              "zipcode": "94401",
              "addressLineOne": "123 Main Street"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "ein": {
            "type": "string",
            "description": "The business’s EIN. Only digits, no formatting.",
            "example": "123456789"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The business’s phone number. No formatting characters, country code is optional.",
            "example": "+14155556789"
          },
          "website": {
            "type": "string",
            "description": "The business’s website.",
            "example": "https://www.my-business.com"
          },
          "customInitializationName": {
            "type": "string",
            "description": "A Custom Initialization controls custom implementation profiles for you in Kanmon. Custom Initializations enable a variety of specific configurations for your integration, including embedded UI customization, feature activation, and platform product-line identification. The Kanmon Team will work with you to establish a Custom Initialization and corresponding custom profile if your platform can benefit from this optional configuration. To identify each Custom Initialization, you can define a unique customInitializationName as a reference.",
            "example": "custom"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata from your system that you want to associate the business with."
          }
        },
        "required": [
          "platformBusinessId"
        ]
      },
      "Business": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID representing the business in Kanmon.",
            "example": "1193fdaf-630c-4771-a629-8da7a87947d2"
          },
          "platformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique ID for the business.",
            "example": "12345"
          },
          "name": {
            "type": "object",
            "description": "The business’s name.",
            "example": "My Business",
            "nullable": true
          },
          "address": {
            "description": "The business’s address. The address is optional. If you provide the address, you need to provide all the required fields in the address.",
            "example": {
              "city": "San Mateo",
              "state": "CA",
              "country": "USA",
              "zipcode": "94401",
              "addressLineOne": "123 Main Street"
            },
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "ein": {
            "type": "string",
            "description": "The business’s EIN. Only digits, no formatting.",
            "example": "123456789",
            "nullable": true
          },
          "phoneNumber": {
            "type": "object",
            "description": "The business’s phone number. No formatting characters, country code is optional.",
            "example": "+14155556789",
            "nullable": true
          },
          "website": {
            "type": "object",
            "description": "The business’s website.",
            "example": "https://www.my-business.com",
            "nullable": true
          },
          "customInitializationName": {
            "type": "object",
            "description": "A Custom Initialization controls custom implementation profiles for you in Kanmon. Custom Initializations enable a variety of specific configurations for your integration, including embedded UI customization, feature activation, and platform product-line identification. The Kanmon Team will work with you to establish a Custom Initialization and corresponding custom profile if your platform can benefit from this optional configuration. To identify each Custom Initialization, you can define a unique customInitializationName as a reference.",
            "example": "custom"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata from your system that you want to associate the business with."
          },
          "createdAt": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the business.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated UTC ISO 8601 timestamp of the business.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "id",
          "name",
          "ein",
          "phoneNumber",
          "website",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "BusinessAlreadyExistsException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "BusinessAlreadyExistsException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "UpdateBusinessRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The business’s name.",
            "example": "My Business"
          },
          "platformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique ID for the business.",
            "example": "12345"
          },
          "address": {
            "description": "The business’s address. The address is optional. If you provide the address, you need to provide all the required fields in the address.",
            "example": {
              "city": "San Mateo",
              "state": "CA",
              "country": "USA",
              "zipcode": "94401",
              "addressLineOne": "123 Main Street"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "ein": {
            "type": "string",
            "description": "The business’s EIN. Only digits, no formatting.",
            "example": "123456789"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The business’s phone number. No formatting characters, country code is optional.",
            "example": "+14155556789"
          },
          "website": {
            "type": "string",
            "description": "The business’s website.",
            "example": "https://www.my-business.com"
          },
          "customInitializationName": {
            "type": "object",
            "description": "A Custom Initialization controls custom implementation profiles for you in Kanmon. Custom Initializations enable a variety of specific configurations for your integration, including embedded UI customization, feature activation, and platform product-line identification. The Kanmon Team will work with you to establish a Custom Initialization and corresponding custom profile if your platform can benefit from this optional configuration. To identify each Custom Initialization, you can define a unique customInitializationName as a reference.",
            "example": "custom"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata from your system that you want to associate the business with."
          }
        }
      },
      "BusinessNotFoundException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "BusinessNotFoundException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "ActivityLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID representing the activity log item in Kanmon.",
            "example": "1193fdaf-630c-4771-a629-8da7a87947d2"
          },
          "businessId": {
            "type": "string",
            "description": "The UUID representing the business in Kanmon.",
            "example": "1193fdaf-630c-4771-a629-8da7a87947d2"
          },
          "platformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique business ID for the user.",
            "example": "12345",
            "nullable": true
          },
          "payload": {
            "type": "object",
            "description": "Event details and schema: https://kanmon.dev/docs/webhook-events"
          },
          "eventType": {
            "type": "string",
            "description": "A description of the log event type.",
            "example": "BUSINESS.NEW_ACCOUNT"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the business.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated UTC ISO 8601 timestamp of the business.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "id",
          "businessId",
          "platformBusinessId",
          "payload",
          "eventType",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetActivityLogsResponse": {
        "type": "object",
        "properties": {
          "activityLogs": {
            "description": "An array of activity logs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityLog"
            }
          },
          "pagination": {
            "description": "Pagination metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResult"
              }
            ]
          }
        },
        "required": [
          "activityLogs",
          "pagination"
        ]
      },
      "GetBusinessesResponse": {
        "type": "object",
        "properties": {
          "businesses": {
            "description": "Array of businesses.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Business"
            }
          },
          "pagination": {
            "description": "Pagination metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResult"
              }
            ]
          }
        },
        "required": [
          "businesses",
          "pagination"
        ]
      },
      "CreateUserRequestBody": {
        "type": "object",
        "properties": {
          "platformUserId": {
            "type": "string",
            "description": "Your platform’s unique ID for the user.",
            "example": "12345"
          },
          "platformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique business ID for the business. Either `platformBusinessId` or `businessId` is required.",
            "example": "12345"
          },
          "businessId": {
            "type": "string",
            "description": "The UUID representing the user’s business in Kanmon. Either `platformBusinessId` or `businessId` is required.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "email": {
            "type": "string",
            "description": "The user’s email.",
            "example": "user@gmail.com"
          },
          "firstName": {
            "type": "string",
            "description": "The user’s first name.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The user’s last name.",
            "example": "Smith"
          },
          "address": {
            "description": "The user’s address. The address is optional. If you provide the address, you need to provide all the required fields in the address.",
            "example": {
              "city": "San Mateo",
              "state": "CA",
              "country": "USA",
              "zipcode": "94401",
              "addressLineOne": "123 Main Street"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "roles": {
            "type": "array",
            "description": "The user’s roles. If no roles are defined, the user will be prompted to select a role within Kanmon. <br/><br/>A primary owner is a user with the authority to issue debt on behalf of the business. <br/>This means the user can complete onboarding, receive offers, choose to accept offers, <br/>sign financing agreements, and service an active issued product. <br/><br/>An operator is a user with permission to service an active issued product. Examples are uploading invoices on <br/>behalf of the business, checking the status of payments, etc. <br /><br/>Please note Kanmon supports an additional user role called secondary owners. <br/>Secondary owners are beneficial owners of a business, like primary owners, and Kanmon <br/>must perform KYC checks for these users. Kanmon will handle creating and managing <br/>these users for KYC purposes through a separate process. <br/>",
            "example": [
              "PRIMARY_OWNER"
            ],
            "items": {
              "type": "string",
              "enum": [
                "PRIMARY_OWNER",
                "OPERATOR"
              ]
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata from your system that you want to associate the user with."
          }
        },
        "required": [
          "platformUserId"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID representing the user in Kanmon.",
            "example": "1193fdaf-630c-4771-a629-8da7a87947d2"
          },
          "platformUserId": {
            "type": "string",
            "description": "Your platform’s unique ID for the user.",
            "example": "12345"
          },
          "platformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique business ID for the user.",
            "example": "12345",
            "nullable": true
          },
          "businessId": {
            "type": "string",
            "description": "The UUID representing the user’s business in Kanmon.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "address": {
            "description": "The user’s address. The address is optional. If you provide the address, you need to provide all the required fields in the address.",
            "nullable": true,
            "example": {
              "city": "San Mateo",
              "state": "CA",
              "country": "USA",
              "zipcode": "94401",
              "addressLineOne": "123 Main Street"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "email": {
            "type": "string",
            "description": "The user’s email.",
            "example": "user@gmail.com",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The user’s first name.",
            "example": "John",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The user’s last name.",
            "example": "Smith",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "description": "The user’s roles. If no roles are defined, the user will be prompted to select a role within Kanmon. <br/><br/>A primary owner is a user with the authority to issue debt on behalf of the business. <br/>This means the user can complete onboarding, receive offers, choose to accept offers, <br/>sign financing agreements, and service an active issued product. <br/><br/>An operator is a user with permission to service an active issued product. Examples are uploading invoices on <br/>behalf of the business, checking the status of payments, etc. <br /><br/>Please note Kanmon supports an additional user role called secondary owners. <br/>Secondary owners are beneficial owners of a business, like primary owners, and Kanmon <br/>must perform KYC checks for these users. Kanmon will handle creating and managing <br/>these users for KYC purposes through a separate process. <br/>",
            "example": [
              "PRIMARY_OWNER"
            ],
            "items": {
              "type": "string",
              "enum": [
                "PRIMARY_OWNER",
                "OPERATOR"
              ]
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata from your system that you want to associate the user with."
          },
          "createdAt": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the user.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated UTC ISO 8601 timestamp of the user.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "id",
          "platformBusinessId",
          "businessId",
          "address",
          "email",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "UserNotFoundException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "UserNotFoundException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "GetUsersResponse": {
        "type": "object",
        "properties": {
          "users": {
            "description": "Array of users.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "pagination": {
            "description": "Pagination metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResult"
              }
            ]
          }
        },
        "required": [
          "users",
          "pagination"
        ]
      },
      "UpdateUserRequestBody": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The user’s first name.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The user’s last name.",
            "example": "Smith"
          },
          "address": {
            "description": "The user’s address. The address is optional. If you provide the address, you need to provide all the required fields in the address.",
            "example": {
              "city": "San Mateo",
              "state": "CA",
              "country": "USA",
              "zipcode": "94401",
              "addressLineOne": "123 Main Street"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "email": {
            "type": "string",
            "description": "The user’s email.",
            "example": "user@gmail.com"
          },
          "roles": {
            "type": "array",
            "description": "The user’s roles. If no roles are defined, the user will be prompted to select a role within Kanmon. <br/><br/>A primary owner is a user with the authority to issue debt on behalf of the business. <br/>This means the user can complete onboarding, receive offers, choose to accept offers, <br/>sign financing agreements, and service an active issued product. <br/><br/>An operator is a user with permission to service an active issued product. Examples are uploading invoices on <br/>behalf of the business, checking the status of payments, etc. <br /><br/>Please note Kanmon supports an additional user role called secondary owners. <br/>Secondary owners are beneficial owners of a business, like primary owners, and Kanmon <br/>must perform KYC checks for these users. Kanmon will handle creating and managing <br/>these users for KYC purposes through a separate process. <br/>",
            "example": [
              "PRIMARY_OWNER"
            ],
            "items": {
              "type": "string",
              "enum": [
                "OPERATOR",
                "PRIMARY_OWNER"
              ]
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata from your system that you want to associate the user with."
          }
        }
      },
      "MergeUsersRequestBody": {
        "type": "object",
        "properties": {
          "sourcePlatformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique business ID for the business to merge users from. Either `sourcePlatformBusinessId` or `sourceBusinessId` is required.",
            "example": "12345"
          },
          "sourceBusinessId": {
            "type": "string",
            "description": "The UUID representing the business in Kanmon to merge users from. Either `sourcePlatformBusinessId` or `sourceBusinessId` is required.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "targetPlatformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique business ID for the business to merge users to. Either `targetPlatformBusinessId` or `targetBusinessId` is required.",
            "example": "67890"
          },
          "targetBusinessId": {
            "type": "string",
            "description": "The UUID representing the business in Kanmon to merge users to. Either `targetPlatformBusinessId` or `targetBusinessId` is required.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          }
        }
      },
      "MergeUsersResponseBody": {
        "type": "object",
        "properties": {
          "mergedUsers": {
            "description": "An array of users that were merged into the target business.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "required": [
          "mergedUsers"
        ]
      },
      "PrimaryBusinessOwnerAlreadyExistsForBusinessException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "PrimaryBusinessOwnerAlreadyExistsForBusinessException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "CreateConnectTokenRequestBody": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "UUID representing the user in Kanmon. Either `userId` or `platformUserId` is required.",
            "example": "145dd895-3243-4741-8e38-6275b6a81d85"
          },
          "platformUserId": {
            "type": "string",
            "description": "Your platform’s unique ID for the user. Either `userId` or `platformUserId` is required.",
            "example": "12345"
          }
        }
      },
      "ConnectToken": {
        "type": "object",
        "properties": {
          "connectToken": {
            "type": "string",
            "description": "The connect token. Pass this to the Kanmon Connect widget.",
            "example": "24470124-e9d4-4a0b-9a1a-d575418ae050"
          }
        },
        "required": [
          "connectToken"
        ]
      },
      "InvoiceStatus": {
        "type": "string",
        "description": "The status of the invoice.\n  <table>\n    <tr>\n      <td>INVOICE_CREATED</td>\n      <td>The business has submitted an invoice and it is under review.<td/>\n    </tr>\n    <tr>\n      <td>INVOICE_FUNDED</td>\n      <td>\n        The funds for the invoice have been disbursed. The business is now\n        expected to pay back the funds. Note that an invoice transitions to\n        this state when the disbursement is initiated, not when the disbursement\n        has cleared.\n      </td>\n    </tr>\n    <tr>\n      <td>INVOICE_PAID_IN_FULL</td>\n      <td> A payment was made that fully paid off an outstanding invoice.</td>\n    </tr>\n    <tr>\n      <td>LATE</td>\n      <td>A payment was not made towards an outstanding invoice.</td>\n    </tr>\n    <tr>\n      <td>REJECTED</td>\n      <td> An invoice was rejected during the funding step.</td>\n    </tr>\n    <tr>\n      <td>DEFAULTED</td>\n      <td>A payment was not made towards an outstanding invoice and we were unable to encourage the borrower to make a payment.</td>\n    </tr>\n  </table>\n  ",
        "enum": [
          "INVOICE_CREATED",
          "INVOICE_FUNDED",
          "INVOICE_PAID_IN_FULL",
          "REJECTED",
          "DEFAULTED",
          "LATE"
        ]
      },
      "InvoiceRepaymentScheduleItem": {
        "type": "object",
        "properties": {
          "repaymentDate": {
            "type": "string",
            "description": "The date on which an installment of the invoice is to be repaid - ISO 8601 format.",
            "example": "2022-05-01"
          },
          "repaymentAmountCents": {
            "type": "number",
            "description": "The amount to be paid as installment - in cents.",
            "example": 100000
          },
          "repaymentFeeAmountCents": {
            "type": "number",
            "description": "The fee amount to be paid as installment - in cents.",
            "example": 2000
          },
          "repaymentPrincipalAmountCents": {
            "type": "number",
            "description": "The principal amount to be paid as installment - in cents.",
            "example": 98000
          }
        },
        "required": [
          "repaymentDate",
          "repaymentAmountCents",
          "repaymentFeeAmountCents",
          "repaymentPrincipalAmountCents"
        ]
      },
      "InvoiceRepaymentSchedule": {
        "type": "object",
        "properties": {
          "schedule": {
            "description": "The invoice repayment schedule items.",
            "example": [
              {
                "repaymentAmountCents": 100000,
                "repaymentDate": "2020-11-11",
                "repaymentFeeAmountCents": 2000,
                "repaymentPrincipalAmountCents": 98000
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceRepaymentScheduleItem"
            }
          }
        },
        "required": [
          "schedule"
        ]
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Kanmon’s unique ID for the invoice.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "platformInvoiceId": {
            "type": "string",
            "description": "Your platform’s unique ID for the invoice.",
            "example": "1234abc",
            "nullable": true
          },
          "platformInvoiceNumber": {
            "type": "string",
            "description": "Your user-facing identifier for the invoice. This does not need to be unique. This may or may not be the same as your `platformInvoiceId`.",
            "example": "123",
            "nullable": true
          },
          "invoiceAmountCents": {
            "type": "number",
            "description": "The invoice amount - in cents.",
            "example": 100000
          },
          "invoiceDueDate": {
            "type": "string",
            "description": "The date when the invoice will be paid by the payor. ISO 8601 date format.",
            "example": "2022-06-01",
            "nullable": true
          },
          "invoiceIssuedDate": {
            "type": "string",
            "description": "The date when the payee issued the invoice. ISO 8601 date format.",
            "example": "2022-05-01",
            "nullable": true
          },
          "payorEmail": {
            "type": "string",
            "description": "The email of the payor.",
            "example": "user@gmail.com",
            "nullable": true
          },
          "payorAddress": {
            "description": "The address of the payor. The address is optional. If you provide the address, you need to provide all the required fields in the address.",
            "nullable": true,
            "example": {
              "city": "San Mateo",
              "state": "CA",
              "country": "USA",
              "zipcode": "94401",
              "addressLineOne": "123 Main Street"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "payorType": {
            "type": "string",
            "description": "`INDIVIDUAL` if the payor is a person and `BUSINESS` if the payor is a company.",
            "enum": [
              "BUSINESS",
              "INDIVIDUAL"
            ],
            "example": "BUSINESS",
            "nullable": true
          },
          "payorBusinessName": {
            "type": "string",
            "description": "The registered name of the payor business when the payor is a business and not an individual.",
            "example": "My Business",
            "nullable": true
          },
          "payorFirstName": {
            "type": "string",
            "description": "The first name of the payor when the payor is an individual and not a business.",
            "nullable": true,
            "example": "John"
          },
          "payorMiddleName": {
            "type": "string",
            "description": "The middle name of the payor when the payor is an individual and not a business.",
            "nullable": true
          },
          "payorLastName": {
            "type": "string",
            "description": "The last name of the payor when the payor is an individual and not a business.",
            "example": "Smith",
            "nullable": true
          },
          "status": {
            "example": "INVOICE_CREATED",
            "$ref": "#/components/schemas/InvoiceStatus"
          },
          "issuedProductId": {
            "type": "string",
            "description": "The unique identifier for the issued product within Kanmon.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "feeAmountCents": {
            "type": "number",
            "description": "The total fee amount - in cents.",
            "example": 2000
          },
          "principalAmountCents": {
            "type": "number",
            "description": "The total principal amount - in cents.",
            "example": 100000
          },
          "invoiceAdvanceAmountCents": {
            "type": "number",
            "description": "The amount after fees the business will receive - in cents.",
            "example": 98000
          },
          "repaymentAmountCents": {
            "type": "number",
            "description": "The total amount that the business will repay - in cents.",
            "example": 100000
          },
          "repaymentSchedule": {
            "description": "The invoice repayment schedule.",
            "example": {
              "schedule": [
                {
                  "repaymentAmountCents": 100000,
                  "repaymentFeeAmountCents": 2000,
                  "repaymentPrincipalAmountCents": 98000,
                  "repaymentDate": "2020-11-11"
                }
              ]
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceRepaymentSchedule"
              }
            ]
          },
          "advanceRatePercentage": {
            "type": "number",
            "description": "The percentage of the invoice that is allowed for advances. E.g. a value of `80` would mean that $800 would be advanced on a $1,000 invoice.",
            "example": 100
          },
          "transactionFeePercentage": {
            "type": "number",
            "description": "The percentage of the transaction that is charged as a fee. E.g. a value of `5` means 5%.",
            "example": 2
          },
          "amountRequestedForFinancingCents": {
            "type": "number",
            "description": "The portion of the invoice amount that the business requests to be financed - in cents.",
            "example": 100000
          },
          "createdAt": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the invoice.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated UTC ISO 8601 timestamp of the invoice.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "id",
          "platformInvoiceId",
          "platformInvoiceNumber",
          "invoiceAmountCents",
          "invoiceDueDate",
          "invoiceIssuedDate",
          "payorEmail",
          "payorBusinessName",
          "payorFirstName",
          "payorMiddleName",
          "payorLastName",
          "status",
          "issuedProductId",
          "feeAmountCents",
          "principalAmountCents",
          "invoiceAdvanceAmountCents",
          "repaymentAmountCents",
          "repaymentSchedule",
          "advanceRatePercentage",
          "transactionFeePercentage",
          "amountRequestedForFinancingCents",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetInvoicesResponse": {
        "type": "object",
        "properties": {
          "invoices": {
            "description": "Array of invoices.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          },
          "pagination": {
            "description": "Pagination metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResult"
              }
            ]
          }
        },
        "required": [
          "invoices",
          "pagination"
        ]
      },
      "TermLoanOfferTerms": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `TERM_LOAN` for `TermLoanOfferTerms`.",
            "example": "TERM_LOAN",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "maxLoanAmountCents": {
            "type": "number",
            "description": "The maximum loan amount - in cents.",
            "example": 1000000
          },
          "loanAmountCents": {
            "type": "number",
            "description": "The loan amount - in cents. This defaults to `maxLoanAmountCents`. However, the business can select a smaller amount.",
            "example": 1000000
          },
          "interestRatePercentage": {
            "type": "number",
            "description": "The rate of interest on the loan. E.g. a value of `10` means 10%.",
            "example": 10
          },
          "durationMonths": {
            "type": "number",
            "description": "The duration of the loan - in months.",
            "example": 6
          },
          "feePercentage": {
            "type": "number",
            "description": "The fee percentage on the loan. E.g. a value of `3` means 3%.",
            "example": 3
          }
        },
        "required": [
          "productType",
          "maxLoanAmountCents",
          "loanAmountCents",
          "interestRatePercentage",
          "durationMonths",
          "feePercentage"
        ]
      },
      "FixedDateInvoiceRepaymentWindow": {
        "type": "object",
        "properties": {
          "repaymentType": {
            "type": "string",
            "enum": [
              "FIXED_DATE"
            ]
          },
          "monthlyRepaymentDay": {
            "type": "number",
            "description": "The day on which the repayment is due. E.g. a value of `15` means the repayment is due on the 15th.",
            "example": "15"
          }
        },
        "required": [
          "repaymentType",
          "monthlyRepaymentDay"
        ]
      },
      "FixedDurationInvoiceRepaymentWindow": {
        "type": "object",
        "properties": {
          "repaymentType": {
            "type": "string",
            "enum": [
              "FIXED_DURATION"
            ]
          },
          "repaymentDurationDays": {
            "type": "number",
            "description": "This amount of days after which the repayment duration is due.",
            "example": 30
          }
        },
        "required": [
          "repaymentType",
          "repaymentDurationDays"
        ]
      },
      "PaymentPlanRepaymentScheduleItem": {
        "type": "object",
        "properties": {
          "repaymentDurationDays": {
            "type": "number",
            "description": "This amount of days after which the repayment duration is due.",
            "example": 30
          },
          "repaymentPercentage": {
            "type": "number",
            "description": "The percentage of the payment that is due for this repayment. E.g. a value of `50` means 50%.",
            "example": 50
          }
        },
        "required": [
          "repaymentDurationDays",
          "repaymentPercentage"
        ]
      },
      "PaymentPlanRepaymentSchedule": {
        "type": "object",
        "properties": {
          "schedule": {
            "description": "An array of repayment schedule items that represents how the invoice will be paid back over multiple repayments.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentPlanRepaymentScheduleItem"
            }
          }
        },
        "required": [
          "schedule"
        ]
      },
      "MultipleDurationInvoiceRepaymentWindow": {
        "type": "object",
        "properties": {
          "repaymentType": {
            "type": "string",
            "enum": [
              "MULTIPLE_DURATION"
            ]
          },
          "repaymentSchedule": {
            "$ref": "#/components/schemas/PaymentPlanRepaymentSchedule"
          }
        },
        "required": [
          "repaymentType",
          "repaymentSchedule"
        ]
      },
      "InvoicePaymentPlan": {
        "type": "object",
        "properties": {
          "advanceRatePercentage": {
            "type": "number",
            "description": "The percentage of the invoice that is allowed for advances. E.g. a value of `80` would mean that $800 would be advanced on a $1,000 invoice.",
            "example": "80"
          },
          "transactionFeePercentage": {
            "type": "number",
            "description": "The percentage of the transaction that is charged as a fee. E.g. a value of `5` means 5%.",
            "example": "5"
          },
          "repaymentWindow": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FixedDateInvoiceRepaymentWindow"
              },
              {
                "$ref": "#/components/schemas/FixedDurationInvoiceRepaymentWindow"
              },
              {
                "$ref": "#/components/schemas/MultipleDurationInvoiceRepaymentWindow"
              }
            ],
            "description": "The repayment window"
          }
        },
        "required": [
          "advanceRatePercentage",
          "transactionFeePercentage",
          "repaymentWindow"
        ]
      },
      "InvoiceFinancingOfferTerms": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `INVOICE_FINANCING` for `InvoiceFinancingOfferTerms`.",
            "example": "INVOICE_FINANCING",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "totalLimitCents": {
            "type": "number",
            "description": "The total limit allowed for this offer - in cents.",
            "example": 1000000
          },
          "pricingPlans": {
            "description": "The pricing plans available for this offer.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicePaymentPlan"
            }
          }
        },
        "required": [
          "productType",
          "totalLimitCents",
          "pricingPlans"
        ]
      },
      "McaOfferTerms": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `MCA` for `McaOfferTerms`.",
            "example": "MCA",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "advanceAmountCents": {
            "type": "number",
            "description": "The loan amount - in cents.",
            "example": 1000000
          },
          "repaymentPercentage": {
            "type": "number",
            "description": "The repayment percentage for calculating repayment amounts. E.g. a value of a `20` means 20%. If a business has $100 of income over a repayment period, the repayment amount would be $20.",
            "example": 20
          },
          "feeFactor": {
            "type": "number",
            "description": "The fee percentage charged as the borrowing cost of the loan. E.g. a value of `1.3` means a 30% fee.",
            "example": 1.3
          },
          "repaymentFrequency": {
            "type": "string",
            "description": "The repayment frequency of the loan. E.g. biweekly repayment occurs every 14 days, weekly repayment occurs every 7 days, etc.",
            "example": "WEEKLY",
            "enum": [
              "DAILY",
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY"
            ]
          },
          "totalRepaymentCents": {
            "type": "number",
            "description": "The total repayment amount in cents required to settle and close the debt. E.g. for a $10,000 loan with a fee factor of 1.3, the repayment amount equates to $13,000.",
            "example": 1300000
          },
          "maxAdvanceAmountCents": {
            "type": "number",
            "description": "The maximum loan amount - in cents.",
            "example": 1000000
          }
        },
        "required": [
          "productType",
          "advanceAmountCents",
          "repaymentPercentage",
          "feeFactor",
          "repaymentFrequency",
          "totalRepaymentCents",
          "maxAdvanceAmountCents"
        ]
      },
      "LineOfCreditOfferTerms": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `LINE_OF_CREDIT` for `LineOfCreditOfferTerms`.",
            "example": "LINE_OF_CREDIT",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "totalLimitCents": {
            "type": "number",
            "description": "The total limit allowed for this offer - in cents.",
            "example": 1000000
          },
          "interestRatePercentage": {
            "type": "number",
            "description": "The rate of interest on the loan. E.g. a value of `10` means 10%.",
            "example": 10
          },
          "feePercentage": {
            "type": "number",
            "description": "The fee percentage charged as the borrowing cost of the loan. E.g. a value of `2` means a 2% fee.",
            "example": 2
          },
          "repaymentDurationMonths": {
            "type": "number",
            "description": "The duration of the repayment for each draw - in months.",
            "example": 3
          }
        },
        "required": [
          "productType",
          "totalLimitCents",
          "interestRatePercentage",
          "feePercentage",
          "repaymentDurationMonths"
        ]
      },
      "IntegratedMcaOfferTerms": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `INTEGRATED_MCA` for `IntegratedMcaOfferTerms`.",
            "example": "INTEGRATED_MCA",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "advanceAmountCents": {
            "type": "number",
            "description": "The loan amount - in cents.",
            "example": 1000000
          },
          "repaymentPercentage": {
            "type": "number",
            "description": "The repayment percentage for calculating repayment amounts. E.g. a value of a `20` means 20%. If a business has $100 of income over a repayment period, the repayment amount would be $20.",
            "example": 20
          },
          "feeFactor": {
            "type": "number",
            "description": "The fee percentage charged as the borrowing cost of the loan. E.g. a value of `1.3` means a 30% fee.",
            "example": 1.3
          },
          "totalRepaymentCents": {
            "type": "number",
            "description": "The total repayment amount in cents required to settle and close the debt. E.g. for a $10,000 loan with a fee factor of 1.3, the repayment amount equates to $13,000.",
            "example": 1300000
          },
          "maxAdvanceAmountCents": {
            "type": "number",
            "description": "The maximum loan amount - in cents.",
            "example": 1000000
          }
        },
        "required": [
          "productType",
          "advanceAmountCents",
          "repaymentPercentage",
          "feeFactor",
          "totalRepaymentCents",
          "maxAdvanceAmountCents"
        ]
      },
      "AccountsPayableFinancingOfferTerms": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `ACCOUNTS_PAYABLE_FINANCING` for `AccountsPayableFinancingOfferTerms`.",
            "example": "ACCOUNTS_PAYABLE_FINANCING",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "totalLimitCents": {
            "type": "number",
            "description": "The total limit allowed for this offer - in cents.",
            "example": 1000000
          },
          "pricingPlans": {
            "description": "The pricing plans available for this offer.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicePaymentPlan"
            }
          }
        },
        "required": [
          "productType",
          "totalLimitCents",
          "pricingPlans"
        ]
      },
      "Offer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique id representing the offer object.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "businessId": {
            "type": "string",
            "description": "The UUID representing the business in Kanmon.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "platformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique ID for the business.",
            "nullable": true,
            "example": "12345"
          },
          "terms": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TermLoanOfferTerms"
              },
              {
                "$ref": "#/components/schemas/InvoiceFinancingOfferTerms"
              },
              {
                "$ref": "#/components/schemas/McaOfferTerms"
              },
              {
                "$ref": "#/components/schemas/IntegratedMcaOfferTerms"
              },
              {
                "$ref": "#/components/schemas/LineOfCreditOfferTerms"
              },
              {
                "$ref": "#/components/schemas/AccountsPayableFinancingOfferTerms"
              }
            ],
            "discriminator": {
              "propertyName": "productType",
              "mapping": {
                "TERM_LOAN": "#/components/schemas/TermLoanOfferTerms",
                "INVOICE_FINANCING": "#/components/schemas/InvoiceFinancingOfferTerms",
                "MCA": "#/components/schemas/McaOfferTerms",
                "INTEGRATED_MCA": "#/components/schemas/IntegratedMcaOfferTerms",
                "LINE_OF_CREDIT": "#/components/schemas/LineOfCreditOfferTerms",
                "ACCOUNTS_PAYABLE_FINANCING": "#/components/schemas/AccountsPayableFinancingOfferTerms"
              }
            },
            "description": "Terms of the offer."
          },
          "expiredAt": {
            "type": "string",
            "nullable": true,
            "description": "The ISO 8601 timestamp for when the offer expires.",
            "example": "2023-12-29T03:57:26.115Z"
          },
          "selectedAt": {
            "type": "string",
            "nullable": true,
            "description": "If the offer has been selected by the business, the ISO 8601 timestamp for when it was selected.",
            "example": "2023-12-15T03:57:26.115Z"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation ISO 8601 timestamp of the offer.",
            "example": "2023-12-15T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated ISO 8601 timestamp of the offer.",
            "example": "2023-12-15T03:57:26.115Z"
          }
        },
        "required": [
          "id",
          "businessId",
          "platformBusinessId",
          "terms",
          "expiredAt",
          "selectedAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "OfferNotFoundException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "OfferNotFoundException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "GetOffersResponse": {
        "type": "object",
        "properties": {
          "offers": {
            "description": "Array of offers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Offer"
            }
          },
          "pagination": {
            "description": "Pagination metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResult"
              }
            ]
          }
        },
        "required": [
          "offers",
          "pagination"
        ]
      },
      "TermLoanServicingData": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `TERM_LOAN` for `TermLoanServicingData`.",
            "example": "TERM_LOAN",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "loanAmountCents": {
            "type": "number",
            "description": "The total loan amount - in cents.",
            "example": 1000000
          },
          "originationFeeCents": {
            "type": "number",
            "description": "The total origination fee amount - in cents.",
            "example": 100000
          },
          "principalBalanceCents": {
            "type": "number",
            "description": "The principal remaining on the loan - in cents.",
            "example": 1000000
          },
          "monthlyPaymentCents": {
            "type": "number",
            "description": "The monthly payment amount - in cents.",
            "example": 100000
          },
          "interestRate": {
            "type": "number",
            "description": "The interest rate of the loan. E.g. a value of `10` means 10%.",
            "example": 10
          },
          "nextPaymentDate": {
            "type": "string",
            "description": "The next scheduled payment date - ISO 8601 date format.",
            "nullable": true,
            "example": "2023-12-15"
          }
        },
        "required": [
          "productType",
          "loanAmountCents",
          "originationFeeCents",
          "principalBalanceCents",
          "monthlyPaymentCents",
          "interestRate",
          "nextPaymentDate"
        ]
      },
      "InvoiceFinancingServicingData": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `INVOICE_FINANCING` for `InvoiceFinancingServicingData`.",
            "example": "INVOICE_FINANCING",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "totalLimitCents": {
            "type": "number",
            "description": "The total limit allowed - in cents."
          },
          "pricingPlans": {
            "description": "The pricing plans available for this issued product.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicePaymentPlan"
            }
          },
          "availableLimitCents": {
            "type": "number",
            "description": "The total limit less the amount of balance outstanding - in cents."
          }
        },
        "required": [
          "productType",
          "totalLimitCents",
          "pricingPlans",
          "availableLimitCents"
        ]
      },
      "McaServicingData": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `MCA` for `McaServicingData`.",
            "example": "MCA",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "advanceAmountCents": {
            "type": "number",
            "description": "The loan amount - in cents.",
            "example": 1000000
          },
          "repaymentPercentage": {
            "type": "number",
            "description": "The repayment percentage for calculating repayment amounts. E.g. a value of a `20` means 20%. If a business has $100 of income over a repayment period, the repayment amount would be $20.",
            "example": 20
          },
          "feeFactor": {
            "type": "number",
            "description": "The fee percentage charged as the borrowing cost of the loan. E.g. a value of `1.3` means a 30% fee.",
            "example": 1.3
          },
          "totalRepaymentCents": {
            "type": "number",
            "description": "The total repayment amount in cents required to settle and close the debt. E.g. for a $10,000 loan with a fee factor of 1.3, the repayment amount equates to $13,000.",
            "example": 1300000
          },
          "repaymentFrequency": {
            "type": "string",
            "description": "The repayment frequency of the loan. E.g. biweekly repayment occurs every 14 days, weekly repayment occurs every 7 days, etc.",
            "example": "WEEKLY",
            "enum": [
              "DAILY",
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY"
            ]
          },
          "nextPaymentDate": {
            "type": "string",
            "description": "The next scheduled payment date - ISO 8601 date format.",
            "example": "2023-12-15",
            "nullable": true
          },
          "advanceBalanceCents": {
            "type": "number",
            "description": "The total repayment amount less the amount repaid - in cents.",
            "example": 1100000
          }
        },
        "required": [
          "productType",
          "advanceAmountCents",
          "repaymentPercentage",
          "feeFactor",
          "totalRepaymentCents",
          "repaymentFrequency",
          "nextPaymentDate",
          "advanceBalanceCents"
        ]
      },
      "IntegratedMcaServicingData": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `INTEGRATED_MCA` for `IntegratedMcaServicingData`.",
            "example": "INTEGRATED_MCA",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "advanceAmountCents": {
            "type": "number",
            "description": "The loan amount - in cents.",
            "example": 1000000
          },
          "repaymentPercentage": {
            "type": "number",
            "description": "The repayment percentage for calculating repayment amounts. E.g. a value of a `20` means 20%. If a business has $100 of income over a repayment period, the repayment amount would be $20.",
            "example": 20
          },
          "feeFactor": {
            "type": "number",
            "description": "The fee percentage charged as the borrowing cost of the loan. E.g. a value of `1.3` means a 30% fee.",
            "example": 1.3
          },
          "totalRepaymentCents": {
            "type": "number",
            "description": "The total repayment amount in cents required to settle and close the debt. E.g. for a $10,000 loan with a fee factor of 1.3, the repayment amount equates to $13,000.",
            "example": 1300000
          },
          "advanceBalanceCents": {
            "type": "number",
            "description": "The total repayment amount less the amount repaid - in cents.",
            "example": 1100000
          }
        },
        "required": [
          "productType",
          "advanceAmountCents",
          "repaymentPercentage",
          "feeFactor",
          "totalRepaymentCents",
          "advanceBalanceCents"
        ]
      },
      "LineOfCreditServicingData": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `LINE_OF_CREDIT` for `LineOfCreditServicingData`.",
            "example": "LINE_OF_CREDIT",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "totalLimitCents": {
            "type": "number",
            "description": "The total credit limit - in cents.",
            "example": 1000000
          },
          "availableLimitCents": {
            "type": "number",
            "description": "The total limit less the amount of balance outstanding - in cents.",
            "example": 900000
          },
          "interestRatePercentage": {
            "type": "number",
            "description": "The rate of interest on the loan. E.g. a value of `10` means 10%.",
            "example": 10
          },
          "feePercentage": {
            "type": "number",
            "description": "The fee percentage charged as the borrowing cost of the loan. E.g. a value of `2` means a 2% fee.",
            "example": 2
          },
          "repaymentDurationMonths": {
            "type": "number",
            "description": "The duration of the repayment for each draw - in months.",
            "example": 3
          }
        },
        "required": [
          "productType",
          "totalLimitCents",
          "availableLimitCents",
          "interestRatePercentage",
          "feePercentage",
          "repaymentDurationMonths"
        ]
      },
      "AccountsPayableFinancingServicingData": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of product being offered. Always `ACCOUNTS_PAYABLE_FINANCING` for `AccountsPayableFinancingServicingData`.",
            "example": "ACCOUNTS_PAYABLE_FINANCING",
            "enum": [
              "INVOICE_FINANCING",
              "TERM_LOAN",
              "MCA",
              "LINE_OF_CREDIT",
              "INTEGRATED_MCA",
              "ACCOUNTS_PAYABLE_FINANCING"
            ]
          },
          "totalLimitCents": {
            "type": "number",
            "description": "The total limit allowed - in cents."
          },
          "pricingPlans": {
            "description": "The pricing plans available for this issued product.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicePaymentPlan"
            }
          },
          "availableLimitCents": {
            "type": "number",
            "description": "The total limit less the amount of balance outstanding - in cents."
          }
        },
        "required": [
          "productType",
          "totalLimitCents",
          "pricingPlans",
          "availableLimitCents"
        ]
      },
      "IssuedProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID representing the issued product in Kanmon.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "offerId": {
            "type": "string",
            "description": "The UUID representing the offer tied to this issued product in Kanmon.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "businessId": {
            "type": "string",
            "description": "The UUID representing the business in Kanmon.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "platformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique ID for the business.",
            "example": "12345",
            "nullable": true
          },
          "loanStatus": {
            "type": "string",
            "description": "The current status of the loan.",
            "enum": [
              "CURRENT",
              "LATE",
              "FULLY_PAID",
              "REFINANCED",
              "CLOSED",
              "DEFAULTED"
            ],
            "example": "CURRENT"
          },
          "servicingData": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TermLoanServicingData"
              },
              {
                "$ref": "#/components/schemas/InvoiceFinancingServicingData"
              },
              {
                "$ref": "#/components/schemas/McaServicingData"
              },
              {
                "$ref": "#/components/schemas/IntegratedMcaServicingData"
              },
              {
                "$ref": "#/components/schemas/LineOfCreditServicingData"
              },
              {
                "$ref": "#/components/schemas/AccountsPayableFinancingServicingData"
              }
            ],
            "discriminator": {
              "propertyName": "productType",
              "mapping": {
                "TERM_LOAN": "#/components/schemas/TermLoanServicingData",
                "INVOICE_FINANCING": "#/components/schemas/InvoiceFinancingServicingData",
                "MCA": "#/components/schemas/McaServicingData",
                "INTEGRATED_MCA": "#/components/schemas/IntegratedMcaServicingData",
                "LINE_OF_CREDIT": "#/components/schemas/LineOfCreditServicingData",
                "ACCOUNTS_PAYABLE_FINANCING": "#/components/schemas/AccountsPayableFinancingServicingData"
              }
            },
            "description": "The data needed to service this specific type of issued product"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the prequalification.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated UTC ISO 8601 timestamp of the prequalification.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "id",
          "offerId",
          "businessId",
          "platformBusinessId",
          "loanStatus",
          "servicingData",
          "createdAt",
          "updatedAt"
        ]
      },
      "IssuedProductNotFoundException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "IssuedProductNotFoundException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "GetIssuedProductsResponse": {
        "type": "object",
        "properties": {
          "issuedProducts": {
            "description": "Array of issued products.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssuedProduct"
            }
          },
          "pagination": {
            "description": "Pagination metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResult"
              }
            ]
          }
        },
        "required": [
          "issuedProducts",
          "pagination"
        ]
      },
      "CreateBusinessBankAccountRequestBody": {
        "type": "object",
        "properties": {
          "platformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique business ID for the business. Either `platformBusinessId` or `businessId` is required.",
            "example": "12345"
          },
          "businessId": {
            "type": "string",
            "description": "The UUID representing the user’s business in Kanmon. Either `platformBusinessId` or `businessId` is required.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "platformBankAccountId": {
            "type": "string",
            "description": "Your platform’s unique ID for the bank account.",
            "example": "12345"
          },
          "accountName": {
            "type": "string",
            "description": "The business defined bank account name.",
            "example": "My bank account"
          },
          "accountNumber": {
            "type": "string",
            "description": "The business’s bank account number. Only digits, no formatting.",
            "example": "123456789"
          },
          "routingNumber": {
            "type": "string",
            "description": "The business’s bank routing number. Should be a 9 digits number, no formatting.",
            "example": "123456789"
          },
          "accountType": {
            "type": "string",
            "description": "The bank account’s type. Currently, we only support checking accounts. We may support others in the future.",
            "example": "CHECKING",
            "enum": [
              "CHECKING"
            ]
          },
          "roles": {
            "type": "array",
            "description": "The bank account’s roles. Currently, we only support creating disbursement bank account. We may support others in the future.",
            "example": [
              "DISBURSEMENT"
            ],
            "items": {
              "type": "string",
              "enum": [
                "DISBURSEMENT"
              ]
            }
          }
        },
        "required": [
          "platformBankAccountId",
          "accountName",
          "accountNumber",
          "routingNumber",
          "accountType",
          "roles"
        ]
      },
      "BusinessBankAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID representing the business bank account in Kanmon.",
            "example": "1193fdaf-630c-4771-a629-8da7a87947d2"
          },
          "platformBankAccountId": {
            "type": "string",
            "description": "Your platform’s unique ID for the bank account.",
            "example": "12345"
          },
          "accountName": {
            "type": "string",
            "description": "The business bank account’s name.",
            "example": "My bank account",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "description": "The business’s bank account number. Only digits, no formatting.",
            "example": "123456789"
          },
          "routingNumber": {
            "type": "string",
            "description": "The business’s bank routing number. Only digits, no formatting.",
            "example": "123456789"
          },
          "accountType": {
            "type": "string",
            "description": "The bank account’s type. Currently, we only support checking accounts. We may support others in the future.",
            "example": "CHECKING",
            "enum": [
              "CHECKING"
            ]
          },
          "roles": {
            "type": "array",
            "description": "The bank account’s roles. Currently, we only support disbursement bank role.",
            "example": [
              "DISBURSEMENT"
            ],
            "items": {
              "type": "string",
              "enum": [
                "DISBURSEMENT"
              ]
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the business.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated UTC ISO 8601 timestamp of the business.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "id",
          "platformBankAccountId",
          "accountName",
          "accountNumber",
          "routingNumber",
          "accountType",
          "roles",
          "createdAt",
          "updatedAt"
        ]
      },
      "BankAccountAlreadyExistException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "BankAccountAlreadyExistException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "BankAccountNotFoundException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "BankAccountNotFoundException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "GetBusinessBankAccountsResponse": {
        "type": "object",
        "properties": {
          "bankAccounts": {
            "description": "Array of business bank accounts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessBankAccount"
            }
          },
          "pagination": {
            "description": "Pagination metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResult"
              }
            ]
          }
        },
        "required": [
          "bankAccounts",
          "pagination"
        ]
      },
      "UpdateBusinessAccountRequestBody": {
        "type": "object",
        "properties": {
          "platformBankAccountId": {
            "type": "string",
            "description": "Your platform’s unique ID for the bank account.",
            "example": "12345"
          },
          "accountName": {
            "type": "string",
            "description": "The business defined bank account name.",
            "example": "My account"
          },
          "accountNumber": {
            "type": "string",
            "description": "The business’s bank account number. Only digits, no formatting.",
            "example": "123456789"
          },
          "routingNumber": {
            "type": "string",
            "description": "The business’s bank routing number. Should be a 9 digits number, no formatting.",
            "example": "123456789"
          }
        }
      },
      "PaymentOrderStatus": {
        "type": "string",
        "description": "The status of the payment.",
        "enum": [
          "FAILED",
          "PAID",
          "PENDING"
        ]
      },
      "PaymentOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID representing the payment order in Kanmon.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "issuedProductId": {
            "type": "string",
            "description": "The UUID representing the issued product in Kanmon.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "drawRequestId": {
            "type": "string",
            "description": "The UUID representing the draw request in Kanmon. (only present for Line of Credit).",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb",
            "nullable": true
          },
          "invoiceId": {
            "type": "string",
            "description": "The UUID representing the invoice in Kanmon. (only present for Invoice Financing).",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb",
            "nullable": true
          },
          "platformInvoiceId": {
            "type": "string",
            "description": "Your platform’s unique ID for the invoice. (only present for Invoice Financing).",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "description": "The effective UTC ISO 8601 date that the payment will process.",
            "example": "2024-01-01"
          },
          "settledDate": {
            "type": "string",
            "description": "The UTC ISO 8601 date that the payment was settled.",
            "example": "2024-01-03",
            "nullable": true
          },
          "totalPaymentAmountCents": {
            "type": "number",
            "description": "The total payment amount - in cents.",
            "example": 100000
          },
          "principalPaymentAmountCents": {
            "type": "number",
            "description": "The principal payment amount - in cents. (null for disbursements).",
            "example": 80000,
            "nullable": true
          },
          "interestPaymentAmountCents": {
            "type": "number",
            "description": "The interest payment amount - in cents. (null for disbursements).",
            "example": 10000,
            "nullable": true
          },
          "feePaymentAmountCents": {
            "type": "number",
            "description": "The fee payment amount - in cents. (null for disbursements).",
            "example": 10000,
            "nullable": true
          },
          "feeType": {
            "type": "string",
            "description": "The type of the fee that was charged. (only present when `feePaymentAmountCents` is not 0 or null).",
            "enum": [
              "LATE_PAYMENT",
              "INSUFFICIENT_FUNDS",
              "TRANSACTION_FEE",
              "MAINTENANCE",
              "EXTENSION_FEE"
            ],
            "example": "INSUFFICIENT_FUNDS",
            "nullable": true
          },
          "direction": {
            "type": "string",
            "description": "The direction of the payment.",
            "enum": [
              "DISBURSEMENT",
              "REPAYMENT"
            ],
            "example": "DISBURSEMENT"
          },
          "status": {
            "example": "PAID",
            "$ref": "#/components/schemas/PaymentOrderStatus"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the payment order.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated UTC ISO 8601 timestamp of the payment order.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "id",
          "issuedProductId",
          "drawRequestId",
          "invoiceId",
          "platformInvoiceId",
          "effectiveDate",
          "settledDate",
          "totalPaymentAmountCents",
          "principalPaymentAmountCents",
          "interestPaymentAmountCents",
          "feePaymentAmountCents",
          "direction",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaymentOrderNotFoundException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "PaymentOrderNotFoundException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "PaymentScheduleItem": {
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "description": "The effective UTC ISO 8601 date that the payment will process.",
            "example": "2024-01-01"
          },
          "totalPaymentAmountCents": {
            "type": "number",
            "description": "The total payment amount - in cents.",
            "example": 100000
          },
          "paymentOrder": {
            "description": "The payment order for this schedule item",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentOrder"
              }
            ]
          }
        },
        "required": [
          "effectiveDate",
          "totalPaymentAmountCents"
        ]
      },
      "GetPaymentScheduleResponse": {
        "type": "object",
        "properties": {
          "paymentSchedule": {
            "description": "Array of payment schedule items for an issued product.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentScheduleItem"
            }
          },
          "pagination": {
            "description": "Pagination metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResult"
              }
            ]
          }
        },
        "required": [
          "paymentSchedule",
          "pagination"
        ]
      },
      "DrawRequestState": {
        "type": "string",
        "description": "The state of the draw request.",
        "enum": [
          "DRAW_REQUEST_CREATED",
          "DRAW_REQUEST_FUNDED",
          "DRAW_REQUEST_PAID_IN_FULL",
          "REJECTED",
          "DEFAULTED"
        ]
      },
      "DrawRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Kanmon’s unique ID for the draw request.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "issuedProductId": {
            "type": "string",
            "description": "The UUID representing the issued product in Kanmon.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "amountCents": {
            "type": "number",
            "description": "The total draw request amount - in cents.",
            "example": 1000000
          },
          "disbursementAmountCents": {
            "type": "number",
            "description": "The total draw request amount, less the fees - in cents. This is the amount disbursed to the business if the draw request is approved.",
            "example": 960000
          },
          "feeAmountCents": {
            "type": "number",
            "description": "The fee amount - in cents.",
            "example": 40000
          },
          "status": {
            "example": "DRAW_REQUEST_FUNDED",
            "$ref": "#/components/schemas/DrawRequestState"
          },
          "interestRatePercentage": {
            "type": "number",
            "description": "The interest rate for the draw request. E.g. a value of `10` means 10%.",
            "example": 10
          },
          "feePercentage": {
            "type": "number",
            "description": "The fee percentage charged as the borrowing cost of the draw request. E.g. a value of `2` means a 2% fee.",
            "example": 5
          },
          "repaymentDurationMonths": {
            "type": "number",
            "description": "The duration of the repayment for the draw request - in months.",
            "example": 6
          },
          "createdAt": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the draw request.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated UTC ISO 8601 timestamp of the draw request.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "id",
          "issuedProductId",
          "amountCents",
          "disbursementAmountCents",
          "feeAmountCents",
          "status",
          "interestRatePercentage",
          "feePercentage",
          "repaymentDurationMonths",
          "createdAt",
          "updatedAt"
        ]
      },
      "DrawRequestNotFoundException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "DrawRequestNotFoundException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "GetDrawRequestsResponse": {
        "type": "object",
        "properties": {
          "drawRequests": {
            "description": "Array of draw requests.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DrawRequest"
            }
          },
          "pagination": {
            "description": "Pagination metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResult"
              }
            ]
          }
        },
        "required": [
          "drawRequests",
          "pagination"
        ]
      },
      "UploadBankDocumentsRequest": {
        "type": "object",
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Invoices to be uploaded. The file format must be PDF. The limit is 10 files, 10 MB per file."
          },
          "businessId": {
            "type": "string",
            "description": "The unique identifier for business within Kanmon. Either of `businessId` or `platformBusinessId` is required.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "platformBusinessId": {
            "type": "string",
            "description": "The unique identifier for business in your platform. Either of `businessId` or `platformBusinessId` is required.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          }
        },
        "required": [
          "invoices"
        ]
      },
      "BusinessDocumentType": {
        "type": "string",
        "description": "The type of document that is uploaded.",
        "enum": [
          "INVOICE"
        ]
      },
      "BusinessDocument": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID representing the business document in Kanmon.",
            "example": "1193fdaf-630c-4771-a629-8da7a87947d2"
          },
          "platformBusinessId": {
            "type": "string",
            "description": "Your platform’s unique ID for the business.",
            "example": "12345",
            "nullable": true
          },
          "businessId": {
            "type": "string",
            "description": "The UUID representing the business in Kanmon.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "documentType": {
            "$ref": "#/components/schemas/BusinessDocumentType"
          },
          "originalFileName": {
            "type": "string",
            "description": "The file’s original file name.",
            "example": "2b5d0f14-9b73-4f44-a82a-2182a9ff77bb"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the business document.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated UTC ISO 8601 timestamp of the business document.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "id",
          "platformBusinessId",
          "businessId",
          "documentType",
          "originalFileName",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateBusinessDocumentsResponse": {
        "type": "object",
        "properties": {
          "documents": {
            "description": "The documents that were uploaded.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessDocument"
            }
          }
        },
        "required": [
          "documents"
        ]
      },
      "IntegratedMcaReceivable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Kanmon’s unique ID for the integrated MCA receivable.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "issuedProductId": {
            "type": "string",
            "description": "The unique identifier for the issued product within Kanmon.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "chargeAmountCents": {
            "type": "number",
            "description": "The charge amount - in cents.",
            "example": 1000000
          },
          "repaymentAmountCents": {
            "type": "number",
            "description": "The repayment amount - in cents. It should be the minimum between (repayment percentage * charge amount) or remaining balance.",
            "example": 100000
          },
          "transactionId": {
            "type": "string",
            "description": "Your platform’s unique ID for the transaction.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "transactionTime": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the transaction.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the receivable.",
            "example": "2022-06-01T03:57:26.115Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated UTC ISO 8601 timestamp of the receivable.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "id",
          "issuedProductId",
          "chargeAmountCents",
          "repaymentAmountCents",
          "transactionId",
          "transactionTime",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetIntegratedMcaReceivablesResponse": {
        "type": "object",
        "properties": {
          "integratedMcaReceivables": {
            "description": "The integrated MCA receivables that were created.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegratedMcaReceivable"
            }
          },
          "pagination": {
            "description": "Pagination metadata.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationResult"
              }
            ]
          }
        },
        "required": [
          "integratedMcaReceivables",
          "pagination"
        ]
      },
      "CreateIntegratedMcaReceivableBody": {
        "type": "object",
        "properties": {
          "issuedProductId": {
            "type": "string",
            "description": "The unique identifier for the issued product within Kanmon.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "chargeAmountCents": {
            "type": "number",
            "description": "The charge amount - in cents.",
            "example": 1000000
          },
          "repaymentAmountCents": {
            "type": "number",
            "description": "\n  <p>The repayment amount - in cents. It should be the lesser of:\n    <br/>\n    ( repayment percentage &times; charge amount ) or remaining balance\n  </p>\n",
            "example": 100000
          },
          "transactionId": {
            "type": "string",
            "description": "Your platform’s unique ID for the transaction.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "transactionTime": {
            "type": "string",
            "description": "Creation UTC ISO 8601 timestamp of the transaction.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "issuedProductId",
          "chargeAmountCents",
          "repaymentAmountCents",
          "transactionId",
          "transactionTime"
        ]
      },
      "SessionInvoice": {
        "type": "object",
        "properties": {
          "platformInvoiceId": {
            "type": "string",
            "description": "Your platform’s unique ID for the invoice.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "platformInvoiceNumber": {
            "type": "string",
            "description": "Your user-facing identifier for the invoice. This does not need to be unique. This may or may not be the same as your `platformInvoiceId`.",
            "example": "123"
          },
          "invoiceAmountCents": {
            "type": "number",
            "description": "The invoice amount - in cents. This needs to be greater than or equal to 100.",
            "example": 1000000
          },
          "invoiceDueDate": {
            "type": "string",
            "description": "The date when the invoice will be paid by the payor. ISO 8601 date format. This date must be at least 7 days in the future and must be after the `invoiceIssuedDate`.",
            "example": "2022-06-01"
          },
          "invoiceIssuedDate": {
            "type": "string",
            "description": "The date when the payee issued the invoice. ISO 8601 date format.",
            "example": "2022-04-01"
          },
          "payorEmail": {
            "type": "string",
            "description": "The email of the payor.",
            "example": "user@gmail.com"
          },
          "payorAddress": {
            "description": "The address of the payor. The address is optional. If you provide the address, you need to provide all the required fields in the address.",
            "example": {
              "city": "San Mateo",
              "state": "CA",
              "country": "USA",
              "zipcode": "94401",
              "addressLineOne": "123 Main Street"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "payorType": {
            "type": "string",
            "description": "`INDIVIDUAL` if the payor is a person and `BUSINESS` if the payor is a company.",
            "enum": [
              "BUSINESS",
              "INDIVIDUAL"
            ],
            "example": "BUSINESS"
          },
          "payorBusinessName": {
            "type": "string",
            "description": "The registered name of the payor business when the payor is a business and not an individual. Required and should only be defined if `payorType` is `BUSINESS`.",
            "example": "My Business"
          },
          "payorFirstName": {
            "type": "string",
            "description": "The first name of the payor when the payor is an individual and not a business. Required and should only be defined if `payorType` is `INDIVIDUAL`.",
            "example": "John"
          },
          "payorMiddleName": {
            "type": "string",
            "description": "The middle name of the payor when the payor is an individual and not a business. Optional and should only be defined if `payorType` is `INDIVIDUAL`."
          },
          "payorLastName": {
            "type": "string",
            "description": "The last name of the payor when the payor is an individual and not a business. Required and should only be defined if `payorType` is `INDIVIDUAL`.",
            "example": "Smith"
          },
          "description": {
            "type": "string",
            "description": "The description of the goods or services in the invoice.",
            "example": "Invoice for equipment purchased."
          }
        },
        "required": [
          "platformInvoiceId",
          "platformInvoiceNumber",
          "invoiceAmountCents",
          "invoiceDueDate",
          "invoiceIssuedDate",
          "payorType",
          "description"
        ]
      },
      "InvoiceFlowSessionTokenData": {
        "type": "object",
        "properties": {
          "component": {
            "type": "string",
            "enum": [
              "SESSION_INVOICE_FLOW"
            ],
            "description": "Generates a session token for the invoice confirmation flow. This option can be used if you have all the required invoice data."
          },
          "invoices": {
            "description": "Details about the list of invoices which are to be created.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionInvoice"
            }
          }
        },
        "required": [
          "component",
          "invoices"
        ]
      },
      "SessionInvoiceWithInvoiceFile": {
        "type": "object",
        "properties": {
          "platformInvoiceId": {
            "type": "string",
            "description": "Your platform’s unique ID for the invoice.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "documentId": {
            "type": "string",
            "description": "The UUID of the invoice document created in Kanmon.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "platformInvoiceNumber": {
            "type": "string",
            "description": "Your user-facing identifier for the invoice. This does not need to be unique. This may or may not be the same as your `platformInvoiceId`.",
            "example": "123"
          },
          "invoiceAmountCents": {
            "type": "number",
            "description": "The invoice amount - in cents. This needs to be greater than or equal to 100.",
            "example": 1000000
          },
          "invoiceDueDate": {
            "type": "string",
            "description": "The date when the invoice will be paid by the payor. ISO 8601 date format. This date must be at least 7 days in the future and must be after the `invoiceIssuedDate`.",
            "example": "2022-06-01"
          },
          "invoiceIssuedDate": {
            "type": "string",
            "description": "The date when the payee issued the invoice. ISO 8601 date format.",
            "example": "2022-04-01"
          },
          "payorEmail": {
            "type": "string",
            "description": "The email of the payor.",
            "example": "user@gmail.com"
          },
          "payorAddress": {
            "description": "The address of the payor. The address is optional. If you provide the address, you need to provide all the required fields in the address.",
            "example": {
              "city": "San Mateo",
              "state": "CA",
              "country": "USA",
              "zipcode": "94401",
              "addressLineOne": "123 Main Street"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "payorType": {
            "type": "string",
            "description": "`INDIVIDUAL` if the payor is a person and `BUSINESS` if the payor is a company.",
            "enum": [
              "BUSINESS",
              "INDIVIDUAL"
            ],
            "example": "BUSINESS"
          },
          "payorBusinessName": {
            "type": "string",
            "description": "The registered name of the payor business when the payor is a business and not an individual.",
            "example": "My Business"
          },
          "payorFirstName": {
            "type": "string",
            "description": "The first name of the payor when the payor is an individual and not a business.",
            "example": "John"
          },
          "payorMiddleName": {
            "type": "string",
            "description": "The middle name of the payor when the payor is an individual and not a business."
          },
          "payorLastName": {
            "type": "string",
            "description": "The last name of the payor when the payor is an individual and not a business.",
            "example": "Smith"
          },
          "description": {
            "type": "string",
            "description": "The description of the goods or services in the invoice.",
            "example": "Invoice for equipment purchased."
          }
        },
        "required": [
          "platformInvoiceId",
          "documentId"
        ]
      },
      "InvoiceFlowWithInvoiceFileSessionTokenData": {
        "type": "object",
        "properties": {
          "component": {
            "type": "string",
            "enum": [
              "SESSION_INVOICE_FLOW_WITH_INVOICE_FILE"
            ],
            "description": "Generates a session token for the invoice confirmation flow. This option can be used if you do not have all the required invoice data for the SESSION_INVOICE_FLOW option. Optional data that is not provided may be collected from the user. An invoice PDF must be provided.`"
          },
          "invoices": {
            "description": "Details about the list of invoices which are to be created.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionInvoiceWithInvoiceFile"
            }
          }
        },
        "required": [
          "component",
          "invoices"
        ]
      },
      "CreateSessionTokenRequestBody": {
        "type": "object",
        "properties": {
          "businessId": {
            "type": "string",
            "description": "The unique identifier for business within Kanmon. Either of `businessId` or `platformBusinessId` is required.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "platformBusinessId": {
            "type": "string",
            "description": "The unique identifier for business in your platform. Either of `businessId` or `platformBusinessId` is required.",
            "example": "adbcccf9-3a7f-4040-add3-55c9d6da2d37"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InvoiceFlowSessionTokenData"
              },
              {
                "$ref": "#/components/schemas/InvoiceFlowWithInvoiceFileSessionTokenData"
              }
            ],
            "discriminator": {
              "propertyName": "component",
              "mapping": {
                "SESSION_INVOICE_FLOW": "#/components/schemas/InvoiceFlowSessionTokenData",
                "SESSION_INVOICE_FLOW_WITH_INVOICE_FILE": "#/components/schemas/InvoiceFlowWithInvoiceFileSessionTokenData"
              }
            },
            "description": "This will differ depending on which `component` is used."
          }
        },
        "required": [
          "data"
        ]
      },
      "EmbeddedSession": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token used to launch an embedded session."
          }
        },
        "required": [
          "sessionToken"
        ]
      },
      "BusinessHasNoPrimaryOwnerException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "BusinessHasNoPrimaryOwnerException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "PrimaryBusinessOwnerAlreadyExistsWithEmailException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "PrimaryBusinessOwnerAlreadyExistsWithEmailException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "PrimaryBusinessOwnerNotFoundException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "PrimaryBusinessOwnerNotFoundException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "UnmergeableBusinessException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "UnmergeableBusinessException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "UserAlreadyExistsWithEmailException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "UserAlreadyExistsWithEmailException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "UserAlreadyExistsWithPlatformUserIdException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "UserAlreadyExistsWithPlatformUserIdException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "BusinessHasNoInvoiceFinancingProductException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "BusinessHasNoInvoiceFinancingProductException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "InvalidInvoiceDueDateException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "InvalidInvoiceDueDateException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "InvoiceNotFoundException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "InvoiceNotFoundException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "OfferAlreadySelectedException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "OfferAlreadySelectedException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "OfferNotLockedException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "OfferNotLockedException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "SomeOffersHaveExpiredException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "SomeOffersHaveExpiredException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "PlatformInvoiceIdAlreadyExistsForAnotherIssuedProductException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "PlatformInvoiceIdAlreadyExistsForAnotherIssuedProductException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "BankStatementsInvalidException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "BankStatementsInvalidException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "PlaidAssetReportsInvalidException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "PlaidAssetReportsInvalidException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "CheckingAccountRequiredException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "CheckingAccountMustPresentException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "BusinessPlaidBankAccountNotFoundException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "BusinessPlaidBankAccountNotFoundException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "IncorrectProductTypeException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "IncorrectProductTypeException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "IntegratedMcaReceivableAlreadyExistsException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "IntegratedMcaReceivableAlreadyExistsException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "NoRemainingBalanceException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "NoRemainingBalanceException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "IncorrectRepaymentAmountException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "IncorrectRepaymentAmountException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "Internal Server Error"
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      },
      "CustomInitializationNotFoundException": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "CustomInitializationNotFoundException"
            ],
            "description": "Safe for programmatic use."
          },
          "message": {
            "type": "string",
            "description": "The human readable description of the error.",
            "example": "An error occurred."
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred - ISO 8601 format.",
            "example": "2022-06-01T03:57:26.115Z"
          }
        },
        "required": [
          "errorCode",
          "message",
          "timestamp"
        ]
      }
    }
  }
}